// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarlifeTouchEventDeviceProto.proto

#ifndef PROTOBUF_CarlifeTouchEventDeviceProto_2eproto__INCLUDED
#define PROTOBUF_CarlifeTouchEventDeviceProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CarlifeTouchEventProto.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace baidu {
namespace carlife {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CarlifeTouchEventDeviceProto_2eproto();
void protobuf_AssignDesc_CarlifeTouchEventDeviceProto_2eproto();
void protobuf_ShutdownFile_CarlifeTouchEventDeviceProto_2eproto();

class CarlifeTouchEventDevice;

// ===================================================================

class CarlifeTouchEventDevice : public ::google::protobuf::Message {
 public:
  CarlifeTouchEventDevice();
  virtual ~CarlifeTouchEventDevice();

  CarlifeTouchEventDevice(const CarlifeTouchEventDevice& from);

  inline CarlifeTouchEventDevice& operator=(const CarlifeTouchEventDevice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CarlifeTouchEventDevice& default_instance();

  void Swap(CarlifeTouchEventDevice* other);

  // implements Message ----------------------------------------------

  CarlifeTouchEventDevice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CarlifeTouchEventDevice& from);
  void MergeFrom(const CarlifeTouchEventDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::int32 cid() const;
  inline void set_cid(::google::protobuf::int32 value);

  // required int32 eventx = 2;
  inline bool has_eventx() const;
  inline void clear_eventx();
  static const int kEventxFieldNumber = 2;
  inline ::google::protobuf::int32 eventx() const;
  inline void set_eventx(::google::protobuf::int32 value);

  // required int32 screen_width = 3;
  inline bool has_screen_width() const;
  inline void clear_screen_width();
  static const int kScreenWidthFieldNumber = 3;
  inline ::google::protobuf::int32 screen_width() const;
  inline void set_screen_width(::google::protobuf::int32 value);

  // required int32 screen_height = 4;
  inline bool has_screen_height() const;
  inline void clear_screen_height();
  static const int kScreenHeightFieldNumber = 4;
  inline ::google::protobuf::int32 screen_height() const;
  inline void set_screen_height(::google::protobuf::int32 value);

  // required int32 abs_x_min = 5;
  inline bool has_abs_x_min() const;
  inline void clear_abs_x_min();
  static const int kAbsXMinFieldNumber = 5;
  inline ::google::protobuf::int32 abs_x_min() const;
  inline void set_abs_x_min(::google::protobuf::int32 value);

  // required int32 abs_x_max = 6;
  inline bool has_abs_x_max() const;
  inline void clear_abs_x_max();
  static const int kAbsXMaxFieldNumber = 6;
  inline ::google::protobuf::int32 abs_x_max() const;
  inline void set_abs_x_max(::google::protobuf::int32 value);

  // required int32 abs_y_min = 7;
  inline bool has_abs_y_min() const;
  inline void clear_abs_y_min();
  static const int kAbsYMinFieldNumber = 7;
  inline ::google::protobuf::int32 abs_y_min() const;
  inline void set_abs_y_min(::google::protobuf::int32 value);

  // required int32 abs_y_max = 8;
  inline bool has_abs_y_max() const;
  inline void clear_abs_y_max();
  static const int kAbsYMaxFieldNumber = 8;
  inline ::google::protobuf::int32 abs_y_max() const;
  inline void set_abs_y_max(::google::protobuf::int32 value);

  // required string device = 9;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 9;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent downEvent = 10;
  inline int downevent_size() const;
  inline void clear_downevent();
  static const int kDownEventFieldNumber = 10;
  inline const ::com::baidu::carlife::protobuf::CarlifeTouchEvent& downevent(int index) const;
  inline ::com::baidu::carlife::protobuf::CarlifeTouchEvent* mutable_downevent(int index);
  inline ::com::baidu::carlife::protobuf::CarlifeTouchEvent* add_downevent();
  inline const ::google::protobuf::RepeatedPtrField< ::com::baidu::carlife::protobuf::CarlifeTouchEvent >&
      downevent() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::baidu::carlife::protobuf::CarlifeTouchEvent >*
      mutable_downevent();

  // repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent upEvent = 11;
  inline int upevent_size() const;
  inline void clear_upevent();
  static const int kUpEventFieldNumber = 11;
  inline const ::com::baidu::carlife::protobuf::CarlifeTouchEvent& upevent(int index) const;
  inline ::com::baidu::carlife::protobuf::CarlifeTouchEvent* mutable_upevent(int index);
  inline ::com::baidu::carlife::protobuf::CarlifeTouchEvent* add_upevent();
  inline const ::google::protobuf::RepeatedPtrField< ::com::baidu::carlife::protobuf::CarlifeTouchEvent >&
      upevent() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::baidu::carlife::protobuf::CarlifeTouchEvent >*
      mutable_upevent();

  // repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent moveEvent = 12;
  inline int moveevent_size() const;
  inline void clear_moveevent();
  static const int kMoveEventFieldNumber = 12;
  inline const ::com::baidu::carlife::protobuf::CarlifeTouchEvent& moveevent(int index) const;
  inline ::com::baidu::carlife::protobuf::CarlifeTouchEvent* mutable_moveevent(int index);
  inline ::com::baidu::carlife::protobuf::CarlifeTouchEvent* add_moveevent();
  inline const ::google::protobuf::RepeatedPtrField< ::com::baidu::carlife::protobuf::CarlifeTouchEvent >&
      moveevent() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::baidu::carlife::protobuf::CarlifeTouchEvent >*
      mutable_moveevent();

  // @@protoc_insertion_point(class_scope:com.baidu.carlife.protobuf.CarlifeTouchEventDevice)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_eventx();
  inline void clear_has_eventx();
  inline void set_has_screen_width();
  inline void clear_has_screen_width();
  inline void set_has_screen_height();
  inline void clear_has_screen_height();
  inline void set_has_abs_x_min();
  inline void clear_has_abs_x_min();
  inline void set_has_abs_x_max();
  inline void clear_has_abs_x_max();
  inline void set_has_abs_y_min();
  inline void clear_has_abs_y_min();
  inline void set_has_abs_y_max();
  inline void clear_has_abs_y_max();
  inline void set_has_device();
  inline void clear_has_device();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cid_;
  ::google::protobuf::int32 eventx_;
  ::google::protobuf::int32 screen_width_;
  ::google::protobuf::int32 screen_height_;
  ::google::protobuf::int32 abs_x_min_;
  ::google::protobuf::int32 abs_x_max_;
  ::google::protobuf::int32 abs_y_min_;
  ::google::protobuf::int32 abs_y_max_;
  ::std::string* device_;
  ::google::protobuf::RepeatedPtrField< ::com::baidu::carlife::protobuf::CarlifeTouchEvent > downevent_;
  ::google::protobuf::RepeatedPtrField< ::com::baidu::carlife::protobuf::CarlifeTouchEvent > upevent_;
  ::google::protobuf::RepeatedPtrField< ::com::baidu::carlife::protobuf::CarlifeTouchEvent > moveevent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_CarlifeTouchEventDeviceProto_2eproto();
  friend void protobuf_AssignDesc_CarlifeTouchEventDeviceProto_2eproto();
  friend void protobuf_ShutdownFile_CarlifeTouchEventDeviceProto_2eproto();

  void InitAsDefaultInstance();
  static CarlifeTouchEventDevice* default_instance_;
};
// ===================================================================


// ===================================================================

// CarlifeTouchEventDevice

// required int32 cid = 1;
inline bool CarlifeTouchEventDevice::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CarlifeTouchEventDevice::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CarlifeTouchEventDevice::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CarlifeTouchEventDevice::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
inline ::google::protobuf::int32 CarlifeTouchEventDevice::cid() const {
  return cid_;
}
inline void CarlifeTouchEventDevice::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
}

// required int32 eventx = 2;
inline bool CarlifeTouchEventDevice::has_eventx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CarlifeTouchEventDevice::set_has_eventx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CarlifeTouchEventDevice::clear_has_eventx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CarlifeTouchEventDevice::clear_eventx() {
  eventx_ = 0;
  clear_has_eventx();
}
inline ::google::protobuf::int32 CarlifeTouchEventDevice::eventx() const {
  return eventx_;
}
inline void CarlifeTouchEventDevice::set_eventx(::google::protobuf::int32 value) {
  set_has_eventx();
  eventx_ = value;
}

// required int32 screen_width = 3;
inline bool CarlifeTouchEventDevice::has_screen_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CarlifeTouchEventDevice::set_has_screen_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CarlifeTouchEventDevice::clear_has_screen_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CarlifeTouchEventDevice::clear_screen_width() {
  screen_width_ = 0;
  clear_has_screen_width();
}
inline ::google::protobuf::int32 CarlifeTouchEventDevice::screen_width() const {
  return screen_width_;
}
inline void CarlifeTouchEventDevice::set_screen_width(::google::protobuf::int32 value) {
  set_has_screen_width();
  screen_width_ = value;
}

// required int32 screen_height = 4;
inline bool CarlifeTouchEventDevice::has_screen_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CarlifeTouchEventDevice::set_has_screen_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CarlifeTouchEventDevice::clear_has_screen_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CarlifeTouchEventDevice::clear_screen_height() {
  screen_height_ = 0;
  clear_has_screen_height();
}
inline ::google::protobuf::int32 CarlifeTouchEventDevice::screen_height() const {
  return screen_height_;
}
inline void CarlifeTouchEventDevice::set_screen_height(::google::protobuf::int32 value) {
  set_has_screen_height();
  screen_height_ = value;
}

// required int32 abs_x_min = 5;
inline bool CarlifeTouchEventDevice::has_abs_x_min() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CarlifeTouchEventDevice::set_has_abs_x_min() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CarlifeTouchEventDevice::clear_has_abs_x_min() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CarlifeTouchEventDevice::clear_abs_x_min() {
  abs_x_min_ = 0;
  clear_has_abs_x_min();
}
inline ::google::protobuf::int32 CarlifeTouchEventDevice::abs_x_min() const {
  return abs_x_min_;
}
inline void CarlifeTouchEventDevice::set_abs_x_min(::google::protobuf::int32 value) {
  set_has_abs_x_min();
  abs_x_min_ = value;
}

// required int32 abs_x_max = 6;
inline bool CarlifeTouchEventDevice::has_abs_x_max() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CarlifeTouchEventDevice::set_has_abs_x_max() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CarlifeTouchEventDevice::clear_has_abs_x_max() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CarlifeTouchEventDevice::clear_abs_x_max() {
  abs_x_max_ = 0;
  clear_has_abs_x_max();
}
inline ::google::protobuf::int32 CarlifeTouchEventDevice::abs_x_max() const {
  return abs_x_max_;
}
inline void CarlifeTouchEventDevice::set_abs_x_max(::google::protobuf::int32 value) {
  set_has_abs_x_max();
  abs_x_max_ = value;
}

// required int32 abs_y_min = 7;
inline bool CarlifeTouchEventDevice::has_abs_y_min() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CarlifeTouchEventDevice::set_has_abs_y_min() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CarlifeTouchEventDevice::clear_has_abs_y_min() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CarlifeTouchEventDevice::clear_abs_y_min() {
  abs_y_min_ = 0;
  clear_has_abs_y_min();
}
inline ::google::protobuf::int32 CarlifeTouchEventDevice::abs_y_min() const {
  return abs_y_min_;
}
inline void CarlifeTouchEventDevice::set_abs_y_min(::google::protobuf::int32 value) {
  set_has_abs_y_min();
  abs_y_min_ = value;
}

// required int32 abs_y_max = 8;
inline bool CarlifeTouchEventDevice::has_abs_y_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CarlifeTouchEventDevice::set_has_abs_y_max() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CarlifeTouchEventDevice::clear_has_abs_y_max() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CarlifeTouchEventDevice::clear_abs_y_max() {
  abs_y_max_ = 0;
  clear_has_abs_y_max();
}
inline ::google::protobuf::int32 CarlifeTouchEventDevice::abs_y_max() const {
  return abs_y_max_;
}
inline void CarlifeTouchEventDevice::set_abs_y_max(::google::protobuf::int32 value) {
  set_has_abs_y_max();
  abs_y_max_ = value;
}

// required string device = 9;
inline bool CarlifeTouchEventDevice::has_device() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CarlifeTouchEventDevice::set_has_device() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CarlifeTouchEventDevice::clear_has_device() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CarlifeTouchEventDevice::clear_device() {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& CarlifeTouchEventDevice::device() const {
  return *device_;
}
inline void CarlifeTouchEventDevice::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(value);
}
inline void CarlifeTouchEventDevice::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(value);
}
inline void CarlifeTouchEventDevice::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CarlifeTouchEventDevice::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  return device_;
}
inline ::std::string* CarlifeTouchEventDevice::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CarlifeTouchEventDevice::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent downEvent = 10;
inline int CarlifeTouchEventDevice::downevent_size() const {
  return downevent_.size();
}
inline void CarlifeTouchEventDevice::clear_downevent() {
  downevent_.Clear();
}
inline const ::com::baidu::carlife::protobuf::CarlifeTouchEvent& CarlifeTouchEventDevice::downevent(int index) const {
  return downevent_.Get(index);
}
inline ::com::baidu::carlife::protobuf::CarlifeTouchEvent* CarlifeTouchEventDevice::mutable_downevent(int index) {
  return downevent_.Mutable(index);
}
inline ::com::baidu::carlife::protobuf::CarlifeTouchEvent* CarlifeTouchEventDevice::add_downevent() {
  return downevent_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::baidu::carlife::protobuf::CarlifeTouchEvent >&
CarlifeTouchEventDevice::downevent() const {
  return downevent_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::baidu::carlife::protobuf::CarlifeTouchEvent >*
CarlifeTouchEventDevice::mutable_downevent() {
  return &downevent_;
}

// repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent upEvent = 11;
inline int CarlifeTouchEventDevice::upevent_size() const {
  return upevent_.size();
}
inline void CarlifeTouchEventDevice::clear_upevent() {
  upevent_.Clear();
}
inline const ::com::baidu::carlife::protobuf::CarlifeTouchEvent& CarlifeTouchEventDevice::upevent(int index) const {
  return upevent_.Get(index);
}
inline ::com::baidu::carlife::protobuf::CarlifeTouchEvent* CarlifeTouchEventDevice::mutable_upevent(int index) {
  return upevent_.Mutable(index);
}
inline ::com::baidu::carlife::protobuf::CarlifeTouchEvent* CarlifeTouchEventDevice::add_upevent() {
  return upevent_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::baidu::carlife::protobuf::CarlifeTouchEvent >&
CarlifeTouchEventDevice::upevent() const {
  return upevent_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::baidu::carlife::protobuf::CarlifeTouchEvent >*
CarlifeTouchEventDevice::mutable_upevent() {
  return &upevent_;
}

// repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent moveEvent = 12;
inline int CarlifeTouchEventDevice::moveevent_size() const {
  return moveevent_.size();
}
inline void CarlifeTouchEventDevice::clear_moveevent() {
  moveevent_.Clear();
}
inline const ::com::baidu::carlife::protobuf::CarlifeTouchEvent& CarlifeTouchEventDevice::moveevent(int index) const {
  return moveevent_.Get(index);
}
inline ::com::baidu::carlife::protobuf::CarlifeTouchEvent* CarlifeTouchEventDevice::mutable_moveevent(int index) {
  return moveevent_.Mutable(index);
}
inline ::com::baidu::carlife::protobuf::CarlifeTouchEvent* CarlifeTouchEventDevice::add_moveevent() {
  return moveevent_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::baidu::carlife::protobuf::CarlifeTouchEvent >&
CarlifeTouchEventDevice::moveevent() const {
  return moveevent_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::baidu::carlife::protobuf::CarlifeTouchEvent >*
CarlifeTouchEventDevice::mutable_moveevent() {
  return &moveevent_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace carlife
}  // namespace baidu
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CarlifeTouchEventDeviceProto_2eproto__INCLUDED
