// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarlifeStatisticsInfoProto.proto

#ifndef PROTOBUF_CarlifeStatisticsInfoProto_2eproto__INCLUDED
#define PROTOBUF_CarlifeStatisticsInfoProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace baidu {
namespace carlife {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CarlifeStatisticsInfoProto_2eproto();
void protobuf_AssignDesc_CarlifeStatisticsInfoProto_2eproto();
void protobuf_ShutdownFile_CarlifeStatisticsInfoProto_2eproto();

class CarlifeStatisticsInfo;

// ===================================================================

class CarlifeStatisticsInfo : public ::google::protobuf::Message {
 public:
  CarlifeStatisticsInfo();
  virtual ~CarlifeStatisticsInfo();

  CarlifeStatisticsInfo(const CarlifeStatisticsInfo& from);

  inline CarlifeStatisticsInfo& operator=(const CarlifeStatisticsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CarlifeStatisticsInfo& default_instance();

  void Swap(CarlifeStatisticsInfo* other);

  // implements Message ----------------------------------------------

  CarlifeStatisticsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CarlifeStatisticsInfo& from);
  void MergeFrom(const CarlifeStatisticsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string cuid = 1;
  inline bool has_cuid() const;
  inline void clear_cuid();
  static const int kCuidFieldNumber = 1;
  inline const ::std::string& cuid() const;
  inline void set_cuid(const ::std::string& value);
  inline void set_cuid(const char* value);
  inline void set_cuid(const char* value, size_t size);
  inline ::std::string* mutable_cuid();
  inline ::std::string* release_cuid();
  inline void set_allocated_cuid(::std::string* cuid);

  // required string versionName = 2;
  inline bool has_versionname() const;
  inline void clear_versionname();
  static const int kVersionNameFieldNumber = 2;
  inline const ::std::string& versionname() const;
  inline void set_versionname(const ::std::string& value);
  inline void set_versionname(const char* value);
  inline void set_versionname(const char* value, size_t size);
  inline ::std::string* mutable_versionname();
  inline ::std::string* release_versionname();
  inline void set_allocated_versionname(::std::string* versionname);

  // required int32 versionCode = 3;
  inline bool has_versioncode() const;
  inline void clear_versioncode();
  static const int kVersionCodeFieldNumber = 3;
  inline ::google::protobuf::int32 versioncode() const;
  inline void set_versioncode(::google::protobuf::int32 value);

  // required string channel = 4;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 4;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // required int32 connectCount = 5;
  inline bool has_connectcount() const;
  inline void clear_connectcount();
  static const int kConnectCountFieldNumber = 5;
  inline ::google::protobuf::int32 connectcount() const;
  inline void set_connectcount(::google::protobuf::int32 value);

  // required int32 connectSuccessCount = 6;
  inline bool has_connectsuccesscount() const;
  inline void clear_connectsuccesscount();
  static const int kConnectSuccessCountFieldNumber = 6;
  inline ::google::protobuf::int32 connectsuccesscount() const;
  inline void set_connectsuccesscount(::google::protobuf::int32 value);

  // required int32 connectTime = 7;
  inline bool has_connecttime() const;
  inline void clear_connecttime();
  static const int kConnectTimeFieldNumber = 7;
  inline ::google::protobuf::int32 connecttime() const;
  inline void set_connecttime(::google::protobuf::int32 value);

  // optional string crashLog = 8;
  inline bool has_crashlog() const;
  inline void clear_crashlog();
  static const int kCrashLogFieldNumber = 8;
  inline const ::std::string& crashlog() const;
  inline void set_crashlog(const ::std::string& value);
  inline void set_crashlog(const char* value);
  inline void set_crashlog(const char* value, size_t size);
  inline ::std::string* mutable_crashlog();
  inline ::std::string* release_crashlog();
  inline void set_allocated_crashlog(::std::string* crashlog);

  // @@protoc_insertion_point(class_scope:com.baidu.carlife.protobuf.CarlifeStatisticsInfo)
 private:
  inline void set_has_cuid();
  inline void clear_has_cuid();
  inline void set_has_versionname();
  inline void clear_has_versionname();
  inline void set_has_versioncode();
  inline void clear_has_versioncode();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_connectcount();
  inline void clear_has_connectcount();
  inline void set_has_connectsuccesscount();
  inline void clear_has_connectsuccesscount();
  inline void set_has_connecttime();
  inline void clear_has_connecttime();
  inline void set_has_crashlog();
  inline void clear_has_crashlog();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cuid_;
  ::std::string* versionname_;
  ::std::string* channel_;
  ::google::protobuf::int32 versioncode_;
  ::google::protobuf::int32 connectcount_;
  ::google::protobuf::int32 connectsuccesscount_;
  ::google::protobuf::int32 connecttime_;
  ::std::string* crashlog_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_CarlifeStatisticsInfoProto_2eproto();
  friend void protobuf_AssignDesc_CarlifeStatisticsInfoProto_2eproto();
  friend void protobuf_ShutdownFile_CarlifeStatisticsInfoProto_2eproto();

  void InitAsDefaultInstance();
  static CarlifeStatisticsInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// CarlifeStatisticsInfo

// required string cuid = 1;
inline bool CarlifeStatisticsInfo::has_cuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CarlifeStatisticsInfo::set_has_cuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CarlifeStatisticsInfo::clear_has_cuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CarlifeStatisticsInfo::clear_cuid() {
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    cuid_->clear();
  }
  clear_has_cuid();
}
inline const ::std::string& CarlifeStatisticsInfo::cuid() const {
  return *cuid_;
}
inline void CarlifeStatisticsInfo::set_cuid(const ::std::string& value) {
  set_has_cuid();
  if (cuid_ == &::google::protobuf::internal::kEmptyString) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(value);
}
inline void CarlifeStatisticsInfo::set_cuid(const char* value) {
  set_has_cuid();
  if (cuid_ == &::google::protobuf::internal::kEmptyString) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(value);
}
inline void CarlifeStatisticsInfo::set_cuid(const char* value, size_t size) {
  set_has_cuid();
  if (cuid_ == &::google::protobuf::internal::kEmptyString) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CarlifeStatisticsInfo::mutable_cuid() {
  set_has_cuid();
  if (cuid_ == &::google::protobuf::internal::kEmptyString) {
    cuid_ = new ::std::string;
  }
  return cuid_;
}
inline ::std::string* CarlifeStatisticsInfo::release_cuid() {
  clear_has_cuid();
  if (cuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cuid_;
    cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CarlifeStatisticsInfo::set_allocated_cuid(::std::string* cuid) {
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cuid_;
  }
  if (cuid) {
    set_has_cuid();
    cuid_ = cuid;
  } else {
    clear_has_cuid();
    cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string versionName = 2;
inline bool CarlifeStatisticsInfo::has_versionname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CarlifeStatisticsInfo::set_has_versionname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CarlifeStatisticsInfo::clear_has_versionname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CarlifeStatisticsInfo::clear_versionname() {
  if (versionname_ != &::google::protobuf::internal::kEmptyString) {
    versionname_->clear();
  }
  clear_has_versionname();
}
inline const ::std::string& CarlifeStatisticsInfo::versionname() const {
  return *versionname_;
}
inline void CarlifeStatisticsInfo::set_versionname(const ::std::string& value) {
  set_has_versionname();
  if (versionname_ == &::google::protobuf::internal::kEmptyString) {
    versionname_ = new ::std::string;
  }
  versionname_->assign(value);
}
inline void CarlifeStatisticsInfo::set_versionname(const char* value) {
  set_has_versionname();
  if (versionname_ == &::google::protobuf::internal::kEmptyString) {
    versionname_ = new ::std::string;
  }
  versionname_->assign(value);
}
inline void CarlifeStatisticsInfo::set_versionname(const char* value, size_t size) {
  set_has_versionname();
  if (versionname_ == &::google::protobuf::internal::kEmptyString) {
    versionname_ = new ::std::string;
  }
  versionname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CarlifeStatisticsInfo::mutable_versionname() {
  set_has_versionname();
  if (versionname_ == &::google::protobuf::internal::kEmptyString) {
    versionname_ = new ::std::string;
  }
  return versionname_;
}
inline ::std::string* CarlifeStatisticsInfo::release_versionname() {
  clear_has_versionname();
  if (versionname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = versionname_;
    versionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CarlifeStatisticsInfo::set_allocated_versionname(::std::string* versionname) {
  if (versionname_ != &::google::protobuf::internal::kEmptyString) {
    delete versionname_;
  }
  if (versionname) {
    set_has_versionname();
    versionname_ = versionname;
  } else {
    clear_has_versionname();
    versionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 versionCode = 3;
inline bool CarlifeStatisticsInfo::has_versioncode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CarlifeStatisticsInfo::set_has_versioncode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CarlifeStatisticsInfo::clear_has_versioncode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CarlifeStatisticsInfo::clear_versioncode() {
  versioncode_ = 0;
  clear_has_versioncode();
}
inline ::google::protobuf::int32 CarlifeStatisticsInfo::versioncode() const {
  return versioncode_;
}
inline void CarlifeStatisticsInfo::set_versioncode(::google::protobuf::int32 value) {
  set_has_versioncode();
  versioncode_ = value;
}

// required string channel = 4;
inline bool CarlifeStatisticsInfo::has_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CarlifeStatisticsInfo::set_has_channel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CarlifeStatisticsInfo::clear_has_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CarlifeStatisticsInfo::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& CarlifeStatisticsInfo::channel() const {
  return *channel_;
}
inline void CarlifeStatisticsInfo::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void CarlifeStatisticsInfo::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void CarlifeStatisticsInfo::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CarlifeStatisticsInfo::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* CarlifeStatisticsInfo::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CarlifeStatisticsInfo::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 connectCount = 5;
inline bool CarlifeStatisticsInfo::has_connectcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CarlifeStatisticsInfo::set_has_connectcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CarlifeStatisticsInfo::clear_has_connectcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CarlifeStatisticsInfo::clear_connectcount() {
  connectcount_ = 0;
  clear_has_connectcount();
}
inline ::google::protobuf::int32 CarlifeStatisticsInfo::connectcount() const {
  return connectcount_;
}
inline void CarlifeStatisticsInfo::set_connectcount(::google::protobuf::int32 value) {
  set_has_connectcount();
  connectcount_ = value;
}

// required int32 connectSuccessCount = 6;
inline bool CarlifeStatisticsInfo::has_connectsuccesscount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CarlifeStatisticsInfo::set_has_connectsuccesscount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CarlifeStatisticsInfo::clear_has_connectsuccesscount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CarlifeStatisticsInfo::clear_connectsuccesscount() {
  connectsuccesscount_ = 0;
  clear_has_connectsuccesscount();
}
inline ::google::protobuf::int32 CarlifeStatisticsInfo::connectsuccesscount() const {
  return connectsuccesscount_;
}
inline void CarlifeStatisticsInfo::set_connectsuccesscount(::google::protobuf::int32 value) {
  set_has_connectsuccesscount();
  connectsuccesscount_ = value;
}

// required int32 connectTime = 7;
inline bool CarlifeStatisticsInfo::has_connecttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CarlifeStatisticsInfo::set_has_connecttime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CarlifeStatisticsInfo::clear_has_connecttime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CarlifeStatisticsInfo::clear_connecttime() {
  connecttime_ = 0;
  clear_has_connecttime();
}
inline ::google::protobuf::int32 CarlifeStatisticsInfo::connecttime() const {
  return connecttime_;
}
inline void CarlifeStatisticsInfo::set_connecttime(::google::protobuf::int32 value) {
  set_has_connecttime();
  connecttime_ = value;
}

// optional string crashLog = 8;
inline bool CarlifeStatisticsInfo::has_crashlog() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CarlifeStatisticsInfo::set_has_crashlog() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CarlifeStatisticsInfo::clear_has_crashlog() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CarlifeStatisticsInfo::clear_crashlog() {
  if (crashlog_ != &::google::protobuf::internal::kEmptyString) {
    crashlog_->clear();
  }
  clear_has_crashlog();
}
inline const ::std::string& CarlifeStatisticsInfo::crashlog() const {
  return *crashlog_;
}
inline void CarlifeStatisticsInfo::set_crashlog(const ::std::string& value) {
  set_has_crashlog();
  if (crashlog_ == &::google::protobuf::internal::kEmptyString) {
    crashlog_ = new ::std::string;
  }
  crashlog_->assign(value);
}
inline void CarlifeStatisticsInfo::set_crashlog(const char* value) {
  set_has_crashlog();
  if (crashlog_ == &::google::protobuf::internal::kEmptyString) {
    crashlog_ = new ::std::string;
  }
  crashlog_->assign(value);
}
inline void CarlifeStatisticsInfo::set_crashlog(const char* value, size_t size) {
  set_has_crashlog();
  if (crashlog_ == &::google::protobuf::internal::kEmptyString) {
    crashlog_ = new ::std::string;
  }
  crashlog_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CarlifeStatisticsInfo::mutable_crashlog() {
  set_has_crashlog();
  if (crashlog_ == &::google::protobuf::internal::kEmptyString) {
    crashlog_ = new ::std::string;
  }
  return crashlog_;
}
inline ::std::string* CarlifeStatisticsInfo::release_crashlog() {
  clear_has_crashlog();
  if (crashlog_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = crashlog_;
    crashlog_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CarlifeStatisticsInfo::set_allocated_crashlog(::std::string* crashlog) {
  if (crashlog_ != &::google::protobuf::internal::kEmptyString) {
    delete crashlog_;
  }
  if (crashlog) {
    set_has_crashlog();
    crashlog_ = crashlog;
  } else {
    clear_has_crashlog();
    crashlog_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace carlife
}  // namespace baidu
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CarlifeStatisticsInfoProto_2eproto__INCLUDED
