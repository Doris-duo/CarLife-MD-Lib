// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarlifeCarGpsProto.proto

#ifndef PROTOBUF_CarlifeCarGpsProto_2eproto__INCLUDED
#define PROTOBUF_CarlifeCarGpsProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace baidu {
namespace carlife {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CarlifeCarGpsProto_2eproto();
void protobuf_AssignDesc_CarlifeCarGpsProto_2eproto();
void protobuf_ShutdownFile_CarlifeCarGpsProto_2eproto();

class CarlifeCarGps;

// ===================================================================

class CarlifeCarGps : public ::google::protobuf::Message {
 public:
  CarlifeCarGps();
  virtual ~CarlifeCarGps();

  CarlifeCarGps(const CarlifeCarGps& from);

  inline CarlifeCarGps& operator=(const CarlifeCarGps& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CarlifeCarGps& default_instance();

  void Swap(CarlifeCarGps* other);

  // implements Message ----------------------------------------------

  CarlifeCarGps* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CarlifeCarGps& from);
  void MergeFrom(const CarlifeCarGps& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 antennaState = 1;
  inline bool has_antennastate() const;
  inline void clear_antennastate();
  static const int kAntennaStateFieldNumber = 1;
  inline ::google::protobuf::uint32 antennastate() const;
  inline void set_antennastate(::google::protobuf::uint32 value);

  // required uint32 signalQuality = 2;
  inline bool has_signalquality() const;
  inline void clear_signalquality();
  static const int kSignalQualityFieldNumber = 2;
  inline ::google::protobuf::uint32 signalquality() const;
  inline void set_signalquality(::google::protobuf::uint32 value);

  // required int32 latitude = 3;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  inline ::google::protobuf::int32 latitude() const;
  inline void set_latitude(::google::protobuf::int32 value);

  // required int32 longitude = 4;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  inline ::google::protobuf::int32 longitude() const;
  inline void set_longitude(::google::protobuf::int32 value);

  // required int32 height = 5;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 5;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // required uint32 speed = 6;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 6;
  inline ::google::protobuf::uint32 speed() const;
  inline void set_speed(::google::protobuf::uint32 value);

  // required uint32 heading = 7;
  inline bool has_heading() const;
  inline void clear_heading();
  static const int kHeadingFieldNumber = 7;
  inline ::google::protobuf::uint32 heading() const;
  inline void set_heading(::google::protobuf::uint32 value);

  // required uint32 year = 8;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 8;
  inline ::google::protobuf::uint32 year() const;
  inline void set_year(::google::protobuf::uint32 value);

  // required uint32 month = 9;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 9;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);

  // required uint32 day = 10;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 10;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // required uint32 hrs = 11;
  inline bool has_hrs() const;
  inline void clear_hrs();
  static const int kHrsFieldNumber = 11;
  inline ::google::protobuf::uint32 hrs() const;
  inline void set_hrs(::google::protobuf::uint32 value);

  // required uint32 min = 12;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 12;
  inline ::google::protobuf::uint32 min() const;
  inline void set_min(::google::protobuf::uint32 value);

  // required uint32 sec = 13;
  inline bool has_sec() const;
  inline void clear_sec();
  static const int kSecFieldNumber = 13;
  inline ::google::protobuf::uint32 sec() const;
  inline void set_sec(::google::protobuf::uint32 value);

  // required uint32 fix = 14;
  inline bool has_fix() const;
  inline void clear_fix();
  static const int kFixFieldNumber = 14;
  inline ::google::protobuf::uint32 fix() const;
  inline void set_fix(::google::protobuf::uint32 value);

  // required uint32 hdop = 15;
  inline bool has_hdop() const;
  inline void clear_hdop();
  static const int kHdopFieldNumber = 15;
  inline ::google::protobuf::uint32 hdop() const;
  inline void set_hdop(::google::protobuf::uint32 value);

  // required uint32 pdop = 16;
  inline bool has_pdop() const;
  inline void clear_pdop();
  static const int kPdopFieldNumber = 16;
  inline ::google::protobuf::uint32 pdop() const;
  inline void set_pdop(::google::protobuf::uint32 value);

  // required uint32 vdop = 17;
  inline bool has_vdop() const;
  inline void clear_vdop();
  static const int kVdopFieldNumber = 17;
  inline ::google::protobuf::uint32 vdop() const;
  inline void set_vdop(::google::protobuf::uint32 value);

  // required uint32 satsUsed = 18;
  inline bool has_satsused() const;
  inline void clear_satsused();
  static const int kSatsUsedFieldNumber = 18;
  inline ::google::protobuf::uint32 satsused() const;
  inline void set_satsused(::google::protobuf::uint32 value);

  // required uint32 satsVisible = 19;
  inline bool has_satsvisible() const;
  inline void clear_satsvisible();
  static const int kSatsVisibleFieldNumber = 19;
  inline ::google::protobuf::uint32 satsvisible() const;
  inline void set_satsvisible(::google::protobuf::uint32 value);

  // required uint32 horPosError = 20;
  inline bool has_horposerror() const;
  inline void clear_horposerror();
  static const int kHorPosErrorFieldNumber = 20;
  inline ::google::protobuf::uint32 horposerror() const;
  inline void set_horposerror(::google::protobuf::uint32 value);

  // required uint32 vertPosError = 21;
  inline bool has_vertposerror() const;
  inline void clear_vertposerror();
  static const int kVertPosErrorFieldNumber = 21;
  inline ::google::protobuf::uint32 vertposerror() const;
  inline void set_vertposerror(::google::protobuf::uint32 value);

  // required int32 northSpeed = 22;
  inline bool has_northspeed() const;
  inline void clear_northspeed();
  static const int kNorthSpeedFieldNumber = 22;
  inline ::google::protobuf::int32 northspeed() const;
  inline void set_northspeed(::google::protobuf::int32 value);

  // required int32 eastSpeed = 23;
  inline bool has_eastspeed() const;
  inline void clear_eastspeed();
  static const int kEastSpeedFieldNumber = 23;
  inline ::google::protobuf::int32 eastspeed() const;
  inline void set_eastspeed(::google::protobuf::int32 value);

  // required int32 vertSpeed = 24;
  inline bool has_vertspeed() const;
  inline void clear_vertspeed();
  static const int kVertSpeedFieldNumber = 24;
  inline ::google::protobuf::int32 vertspeed() const;
  inline void set_vertspeed(::google::protobuf::int32 value);

  // optional uint64 timeStamp = 25;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 25;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.baidu.carlife.protobuf.CarlifeCarGps)
 private:
  inline void set_has_antennastate();
  inline void clear_has_antennastate();
  inline void set_has_signalquality();
  inline void clear_has_signalquality();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_heading();
  inline void clear_has_heading();
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_hrs();
  inline void clear_has_hrs();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_sec();
  inline void clear_has_sec();
  inline void set_has_fix();
  inline void clear_has_fix();
  inline void set_has_hdop();
  inline void clear_has_hdop();
  inline void set_has_pdop();
  inline void clear_has_pdop();
  inline void set_has_vdop();
  inline void clear_has_vdop();
  inline void set_has_satsused();
  inline void clear_has_satsused();
  inline void set_has_satsvisible();
  inline void clear_has_satsvisible();
  inline void set_has_horposerror();
  inline void clear_has_horposerror();
  inline void set_has_vertposerror();
  inline void clear_has_vertposerror();
  inline void set_has_northspeed();
  inline void clear_has_northspeed();
  inline void set_has_eastspeed();
  inline void clear_has_eastspeed();
  inline void set_has_vertspeed();
  inline void clear_has_vertspeed();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 antennastate_;
  ::google::protobuf::uint32 signalquality_;
  ::google::protobuf::int32 latitude_;
  ::google::protobuf::int32 longitude_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::uint32 speed_;
  ::google::protobuf::uint32 heading_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 hrs_;
  ::google::protobuf::uint32 min_;
  ::google::protobuf::uint32 sec_;
  ::google::protobuf::uint32 fix_;
  ::google::protobuf::uint32 hdop_;
  ::google::protobuf::uint32 pdop_;
  ::google::protobuf::uint32 vdop_;
  ::google::protobuf::uint32 satsused_;
  ::google::protobuf::uint32 satsvisible_;
  ::google::protobuf::uint32 horposerror_;
  ::google::protobuf::uint32 vertposerror_;
  ::google::protobuf::int32 northspeed_;
  ::google::protobuf::int32 eastspeed_;
  ::google::protobuf::int32 vertspeed_;
  ::google::protobuf::uint64 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(25 + 31) / 32];

  friend void  protobuf_AddDesc_CarlifeCarGpsProto_2eproto();
  friend void protobuf_AssignDesc_CarlifeCarGpsProto_2eproto();
  friend void protobuf_ShutdownFile_CarlifeCarGpsProto_2eproto();

  void InitAsDefaultInstance();
  static CarlifeCarGps* default_instance_;
};
// ===================================================================


// ===================================================================

// CarlifeCarGps

// required uint32 antennaState = 1;
inline bool CarlifeCarGps::has_antennastate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CarlifeCarGps::set_has_antennastate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CarlifeCarGps::clear_has_antennastate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CarlifeCarGps::clear_antennastate() {
  antennastate_ = 0u;
  clear_has_antennastate();
}
inline ::google::protobuf::uint32 CarlifeCarGps::antennastate() const {
  return antennastate_;
}
inline void CarlifeCarGps::set_antennastate(::google::protobuf::uint32 value) {
  set_has_antennastate();
  antennastate_ = value;
}

// required uint32 signalQuality = 2;
inline bool CarlifeCarGps::has_signalquality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CarlifeCarGps::set_has_signalquality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CarlifeCarGps::clear_has_signalquality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CarlifeCarGps::clear_signalquality() {
  signalquality_ = 0u;
  clear_has_signalquality();
}
inline ::google::protobuf::uint32 CarlifeCarGps::signalquality() const {
  return signalquality_;
}
inline void CarlifeCarGps::set_signalquality(::google::protobuf::uint32 value) {
  set_has_signalquality();
  signalquality_ = value;
}

// required int32 latitude = 3;
inline bool CarlifeCarGps::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CarlifeCarGps::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CarlifeCarGps::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CarlifeCarGps::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline ::google::protobuf::int32 CarlifeCarGps::latitude() const {
  return latitude_;
}
inline void CarlifeCarGps::set_latitude(::google::protobuf::int32 value) {
  set_has_latitude();
  latitude_ = value;
}

// required int32 longitude = 4;
inline bool CarlifeCarGps::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CarlifeCarGps::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CarlifeCarGps::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CarlifeCarGps::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline ::google::protobuf::int32 CarlifeCarGps::longitude() const {
  return longitude_;
}
inline void CarlifeCarGps::set_longitude(::google::protobuf::int32 value) {
  set_has_longitude();
  longitude_ = value;
}

// required int32 height = 5;
inline bool CarlifeCarGps::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CarlifeCarGps::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CarlifeCarGps::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CarlifeCarGps::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 CarlifeCarGps::height() const {
  return height_;
}
inline void CarlifeCarGps::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// required uint32 speed = 6;
inline bool CarlifeCarGps::has_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CarlifeCarGps::set_has_speed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CarlifeCarGps::clear_has_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CarlifeCarGps::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 CarlifeCarGps::speed() const {
  return speed_;
}
inline void CarlifeCarGps::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
}

// required uint32 heading = 7;
inline bool CarlifeCarGps::has_heading() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CarlifeCarGps::set_has_heading() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CarlifeCarGps::clear_has_heading() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CarlifeCarGps::clear_heading() {
  heading_ = 0u;
  clear_has_heading();
}
inline ::google::protobuf::uint32 CarlifeCarGps::heading() const {
  return heading_;
}
inline void CarlifeCarGps::set_heading(::google::protobuf::uint32 value) {
  set_has_heading();
  heading_ = value;
}

// required uint32 year = 8;
inline bool CarlifeCarGps::has_year() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CarlifeCarGps::set_has_year() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CarlifeCarGps::clear_has_year() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CarlifeCarGps::clear_year() {
  year_ = 0u;
  clear_has_year();
}
inline ::google::protobuf::uint32 CarlifeCarGps::year() const {
  return year_;
}
inline void CarlifeCarGps::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
}

// required uint32 month = 9;
inline bool CarlifeCarGps::has_month() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CarlifeCarGps::set_has_month() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CarlifeCarGps::clear_has_month() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CarlifeCarGps::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 CarlifeCarGps::month() const {
  return month_;
}
inline void CarlifeCarGps::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
}

// required uint32 day = 10;
inline bool CarlifeCarGps::has_day() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CarlifeCarGps::set_has_day() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CarlifeCarGps::clear_has_day() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CarlifeCarGps::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 CarlifeCarGps::day() const {
  return day_;
}
inline void CarlifeCarGps::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// required uint32 hrs = 11;
inline bool CarlifeCarGps::has_hrs() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CarlifeCarGps::set_has_hrs() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CarlifeCarGps::clear_has_hrs() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CarlifeCarGps::clear_hrs() {
  hrs_ = 0u;
  clear_has_hrs();
}
inline ::google::protobuf::uint32 CarlifeCarGps::hrs() const {
  return hrs_;
}
inline void CarlifeCarGps::set_hrs(::google::protobuf::uint32 value) {
  set_has_hrs();
  hrs_ = value;
}

// required uint32 min = 12;
inline bool CarlifeCarGps::has_min() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CarlifeCarGps::set_has_min() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CarlifeCarGps::clear_has_min() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CarlifeCarGps::clear_min() {
  min_ = 0u;
  clear_has_min();
}
inline ::google::protobuf::uint32 CarlifeCarGps::min() const {
  return min_;
}
inline void CarlifeCarGps::set_min(::google::protobuf::uint32 value) {
  set_has_min();
  min_ = value;
}

// required uint32 sec = 13;
inline bool CarlifeCarGps::has_sec() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CarlifeCarGps::set_has_sec() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CarlifeCarGps::clear_has_sec() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CarlifeCarGps::clear_sec() {
  sec_ = 0u;
  clear_has_sec();
}
inline ::google::protobuf::uint32 CarlifeCarGps::sec() const {
  return sec_;
}
inline void CarlifeCarGps::set_sec(::google::protobuf::uint32 value) {
  set_has_sec();
  sec_ = value;
}

// required uint32 fix = 14;
inline bool CarlifeCarGps::has_fix() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CarlifeCarGps::set_has_fix() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CarlifeCarGps::clear_has_fix() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CarlifeCarGps::clear_fix() {
  fix_ = 0u;
  clear_has_fix();
}
inline ::google::protobuf::uint32 CarlifeCarGps::fix() const {
  return fix_;
}
inline void CarlifeCarGps::set_fix(::google::protobuf::uint32 value) {
  set_has_fix();
  fix_ = value;
}

// required uint32 hdop = 15;
inline bool CarlifeCarGps::has_hdop() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CarlifeCarGps::set_has_hdop() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CarlifeCarGps::clear_has_hdop() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CarlifeCarGps::clear_hdop() {
  hdop_ = 0u;
  clear_has_hdop();
}
inline ::google::protobuf::uint32 CarlifeCarGps::hdop() const {
  return hdop_;
}
inline void CarlifeCarGps::set_hdop(::google::protobuf::uint32 value) {
  set_has_hdop();
  hdop_ = value;
}

// required uint32 pdop = 16;
inline bool CarlifeCarGps::has_pdop() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CarlifeCarGps::set_has_pdop() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CarlifeCarGps::clear_has_pdop() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CarlifeCarGps::clear_pdop() {
  pdop_ = 0u;
  clear_has_pdop();
}
inline ::google::protobuf::uint32 CarlifeCarGps::pdop() const {
  return pdop_;
}
inline void CarlifeCarGps::set_pdop(::google::protobuf::uint32 value) {
  set_has_pdop();
  pdop_ = value;
}

// required uint32 vdop = 17;
inline bool CarlifeCarGps::has_vdop() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CarlifeCarGps::set_has_vdop() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CarlifeCarGps::clear_has_vdop() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CarlifeCarGps::clear_vdop() {
  vdop_ = 0u;
  clear_has_vdop();
}
inline ::google::protobuf::uint32 CarlifeCarGps::vdop() const {
  return vdop_;
}
inline void CarlifeCarGps::set_vdop(::google::protobuf::uint32 value) {
  set_has_vdop();
  vdop_ = value;
}

// required uint32 satsUsed = 18;
inline bool CarlifeCarGps::has_satsused() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CarlifeCarGps::set_has_satsused() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CarlifeCarGps::clear_has_satsused() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CarlifeCarGps::clear_satsused() {
  satsused_ = 0u;
  clear_has_satsused();
}
inline ::google::protobuf::uint32 CarlifeCarGps::satsused() const {
  return satsused_;
}
inline void CarlifeCarGps::set_satsused(::google::protobuf::uint32 value) {
  set_has_satsused();
  satsused_ = value;
}

// required uint32 satsVisible = 19;
inline bool CarlifeCarGps::has_satsvisible() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CarlifeCarGps::set_has_satsvisible() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CarlifeCarGps::clear_has_satsvisible() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CarlifeCarGps::clear_satsvisible() {
  satsvisible_ = 0u;
  clear_has_satsvisible();
}
inline ::google::protobuf::uint32 CarlifeCarGps::satsvisible() const {
  return satsvisible_;
}
inline void CarlifeCarGps::set_satsvisible(::google::protobuf::uint32 value) {
  set_has_satsvisible();
  satsvisible_ = value;
}

// required uint32 horPosError = 20;
inline bool CarlifeCarGps::has_horposerror() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CarlifeCarGps::set_has_horposerror() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CarlifeCarGps::clear_has_horposerror() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CarlifeCarGps::clear_horposerror() {
  horposerror_ = 0u;
  clear_has_horposerror();
}
inline ::google::protobuf::uint32 CarlifeCarGps::horposerror() const {
  return horposerror_;
}
inline void CarlifeCarGps::set_horposerror(::google::protobuf::uint32 value) {
  set_has_horposerror();
  horposerror_ = value;
}

// required uint32 vertPosError = 21;
inline bool CarlifeCarGps::has_vertposerror() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CarlifeCarGps::set_has_vertposerror() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CarlifeCarGps::clear_has_vertposerror() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CarlifeCarGps::clear_vertposerror() {
  vertposerror_ = 0u;
  clear_has_vertposerror();
}
inline ::google::protobuf::uint32 CarlifeCarGps::vertposerror() const {
  return vertposerror_;
}
inline void CarlifeCarGps::set_vertposerror(::google::protobuf::uint32 value) {
  set_has_vertposerror();
  vertposerror_ = value;
}

// required int32 northSpeed = 22;
inline bool CarlifeCarGps::has_northspeed() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CarlifeCarGps::set_has_northspeed() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CarlifeCarGps::clear_has_northspeed() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CarlifeCarGps::clear_northspeed() {
  northspeed_ = 0;
  clear_has_northspeed();
}
inline ::google::protobuf::int32 CarlifeCarGps::northspeed() const {
  return northspeed_;
}
inline void CarlifeCarGps::set_northspeed(::google::protobuf::int32 value) {
  set_has_northspeed();
  northspeed_ = value;
}

// required int32 eastSpeed = 23;
inline bool CarlifeCarGps::has_eastspeed() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CarlifeCarGps::set_has_eastspeed() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CarlifeCarGps::clear_has_eastspeed() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CarlifeCarGps::clear_eastspeed() {
  eastspeed_ = 0;
  clear_has_eastspeed();
}
inline ::google::protobuf::int32 CarlifeCarGps::eastspeed() const {
  return eastspeed_;
}
inline void CarlifeCarGps::set_eastspeed(::google::protobuf::int32 value) {
  set_has_eastspeed();
  eastspeed_ = value;
}

// required int32 vertSpeed = 24;
inline bool CarlifeCarGps::has_vertspeed() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CarlifeCarGps::set_has_vertspeed() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CarlifeCarGps::clear_has_vertspeed() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CarlifeCarGps::clear_vertspeed() {
  vertspeed_ = 0;
  clear_has_vertspeed();
}
inline ::google::protobuf::int32 CarlifeCarGps::vertspeed() const {
  return vertspeed_;
}
inline void CarlifeCarGps::set_vertspeed(::google::protobuf::int32 value) {
  set_has_vertspeed();
  vertspeed_ = value;
}

// optional uint64 timeStamp = 25;
inline bool CarlifeCarGps::has_timestamp() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CarlifeCarGps::set_has_timestamp() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CarlifeCarGps::clear_has_timestamp() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CarlifeCarGps::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 CarlifeCarGps::timestamp() const {
  return timestamp_;
}
inline void CarlifeCarGps::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace carlife
}  // namespace baidu
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CarlifeCarGpsProto_2eproto__INCLUDED
