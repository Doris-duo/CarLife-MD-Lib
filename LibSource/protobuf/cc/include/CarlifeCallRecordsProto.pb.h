// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarlifeCallRecordsProto.proto

#ifndef PROTOBUF_CarlifeCallRecordsProto_2eproto__INCLUDED
#define PROTOBUF_CarlifeCallRecordsProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace baidu {
namespace carlife {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CarlifeCallRecordsProto_2eproto();
void protobuf_AssignDesc_CarlifeCallRecordsProto_2eproto();
void protobuf_ShutdownFile_CarlifeCallRecordsProto_2eproto();

class CarlifeCallRecords;

enum CarlifeCallRecords_CallRecordsType {
  CarlifeCallRecords_CallRecordsType_DEFAULT_TYPE = 0,
  CarlifeCallRecords_CallRecordsType_INCOMING_TYPE = 1,
  CarlifeCallRecords_CallRecordsType_OUTGOING_TYPE = 2,
  CarlifeCallRecords_CallRecordsType_MISSED_TYPE = 3
};
bool CarlifeCallRecords_CallRecordsType_IsValid(int value);
const CarlifeCallRecords_CallRecordsType CarlifeCallRecords_CallRecordsType_CallRecordsType_MIN = CarlifeCallRecords_CallRecordsType_DEFAULT_TYPE;
const CarlifeCallRecords_CallRecordsType CarlifeCallRecords_CallRecordsType_CallRecordsType_MAX = CarlifeCallRecords_CallRecordsType_MISSED_TYPE;
const int CarlifeCallRecords_CallRecordsType_CallRecordsType_ARRAYSIZE = CarlifeCallRecords_CallRecordsType_CallRecordsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CarlifeCallRecords_CallRecordsType_descriptor();
inline const ::std::string& CarlifeCallRecords_CallRecordsType_Name(CarlifeCallRecords_CallRecordsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CarlifeCallRecords_CallRecordsType_descriptor(), value);
}
inline bool CarlifeCallRecords_CallRecordsType_Parse(
    const ::std::string& name, CarlifeCallRecords_CallRecordsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CarlifeCallRecords_CallRecordsType>(
    CarlifeCallRecords_CallRecordsType_descriptor(), name, value);
}
// ===================================================================

class CarlifeCallRecords : public ::google::protobuf::Message {
 public:
  CarlifeCallRecords();
  virtual ~CarlifeCallRecords();

  CarlifeCallRecords(const CarlifeCallRecords& from);

  inline CarlifeCallRecords& operator=(const CarlifeCallRecords& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CarlifeCallRecords& default_instance();

  void Swap(CarlifeCallRecords* other);

  // implements Message ----------------------------------------------

  CarlifeCallRecords* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CarlifeCallRecords& from);
  void MergeFrom(const CarlifeCallRecords& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CarlifeCallRecords_CallRecordsType CallRecordsType;
  static const CallRecordsType DEFAULT_TYPE = CarlifeCallRecords_CallRecordsType_DEFAULT_TYPE;
  static const CallRecordsType INCOMING_TYPE = CarlifeCallRecords_CallRecordsType_INCOMING_TYPE;
  static const CallRecordsType OUTGOING_TYPE = CarlifeCallRecords_CallRecordsType_OUTGOING_TYPE;
  static const CallRecordsType MISSED_TYPE = CarlifeCallRecords_CallRecordsType_MISSED_TYPE;
  static inline bool CallRecordsType_IsValid(int value) {
    return CarlifeCallRecords_CallRecordsType_IsValid(value);
  }
  static const CallRecordsType CallRecordsType_MIN =
    CarlifeCallRecords_CallRecordsType_CallRecordsType_MIN;
  static const CallRecordsType CallRecordsType_MAX =
    CarlifeCallRecords_CallRecordsType_CallRecordsType_MAX;
  static const int CallRecordsType_ARRAYSIZE =
    CarlifeCallRecords_CallRecordsType_CallRecordsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CallRecordsType_descriptor() {
    return CarlifeCallRecords_CallRecordsType_descriptor();
  }
  static inline const ::std::string& CallRecordsType_Name(CallRecordsType value) {
    return CarlifeCallRecords_CallRecordsType_Name(value);
  }
  static inline bool CallRecordsType_Parse(const ::std::string& name,
      CallRecordsType* value) {
    return CarlifeCallRecords_CallRecordsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::int32 cid() const;
  inline void set_cid(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string number = 3;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 3;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // required string duration = 4;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 4;
  inline const ::std::string& duration() const;
  inline void set_duration(const ::std::string& value);
  inline void set_duration(const char* value);
  inline void set_duration(const char* value, size_t size);
  inline ::std::string* mutable_duration();
  inline ::std::string* release_duration();
  inline void set_allocated_duration(::std::string* duration);

  // required string time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // required .com.baidu.carlife.protobuf.CarlifeCallRecords.CallRecordsType type = 6 [default = DEFAULT_TYPE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::com::baidu::carlife::protobuf::CarlifeCallRecords_CallRecordsType type() const;
  inline void set_type(::com::baidu::carlife::protobuf::CarlifeCallRecords_CallRecordsType value);

  // @@protoc_insertion_point(class_scope:com.baidu.carlife.protobuf.CarlifeCallRecords)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* number_;
  ::google::protobuf::int32 cid_;
  int type_;
  ::std::string* duration_;
  ::std::string* time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CarlifeCallRecordsProto_2eproto();
  friend void protobuf_AssignDesc_CarlifeCallRecordsProto_2eproto();
  friend void protobuf_ShutdownFile_CarlifeCallRecordsProto_2eproto();

  void InitAsDefaultInstance();
  static CarlifeCallRecords* default_instance_;
};
// ===================================================================


// ===================================================================

// CarlifeCallRecords

// required int32 cid = 1;
inline bool CarlifeCallRecords::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CarlifeCallRecords::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CarlifeCallRecords::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CarlifeCallRecords::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
inline ::google::protobuf::int32 CarlifeCallRecords::cid() const {
  return cid_;
}
inline void CarlifeCallRecords::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
}

// required string name = 2;
inline bool CarlifeCallRecords::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CarlifeCallRecords::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CarlifeCallRecords::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CarlifeCallRecords::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CarlifeCallRecords::name() const {
  return *name_;
}
inline void CarlifeCallRecords::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CarlifeCallRecords::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CarlifeCallRecords::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CarlifeCallRecords::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CarlifeCallRecords::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CarlifeCallRecords::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string number = 3;
inline bool CarlifeCallRecords::has_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CarlifeCallRecords::set_has_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CarlifeCallRecords::clear_has_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CarlifeCallRecords::clear_number() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& CarlifeCallRecords::number() const {
  return *number_;
}
inline void CarlifeCallRecords::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void CarlifeCallRecords::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void CarlifeCallRecords::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CarlifeCallRecords::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  return number_;
}
inline ::std::string* CarlifeCallRecords::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CarlifeCallRecords::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string duration = 4;
inline bool CarlifeCallRecords::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CarlifeCallRecords::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CarlifeCallRecords::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CarlifeCallRecords::clear_duration() {
  if (duration_ != &::google::protobuf::internal::kEmptyString) {
    duration_->clear();
  }
  clear_has_duration();
}
inline const ::std::string& CarlifeCallRecords::duration() const {
  return *duration_;
}
inline void CarlifeCallRecords::set_duration(const ::std::string& value) {
  set_has_duration();
  if (duration_ == &::google::protobuf::internal::kEmptyString) {
    duration_ = new ::std::string;
  }
  duration_->assign(value);
}
inline void CarlifeCallRecords::set_duration(const char* value) {
  set_has_duration();
  if (duration_ == &::google::protobuf::internal::kEmptyString) {
    duration_ = new ::std::string;
  }
  duration_->assign(value);
}
inline void CarlifeCallRecords::set_duration(const char* value, size_t size) {
  set_has_duration();
  if (duration_ == &::google::protobuf::internal::kEmptyString) {
    duration_ = new ::std::string;
  }
  duration_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CarlifeCallRecords::mutable_duration() {
  set_has_duration();
  if (duration_ == &::google::protobuf::internal::kEmptyString) {
    duration_ = new ::std::string;
  }
  return duration_;
}
inline ::std::string* CarlifeCallRecords::release_duration() {
  clear_has_duration();
  if (duration_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = duration_;
    duration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CarlifeCallRecords::set_allocated_duration(::std::string* duration) {
  if (duration_ != &::google::protobuf::internal::kEmptyString) {
    delete duration_;
  }
  if (duration) {
    set_has_duration();
    duration_ = duration;
  } else {
    clear_has_duration();
    duration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string time = 5;
inline bool CarlifeCallRecords::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CarlifeCallRecords::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CarlifeCallRecords::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CarlifeCallRecords::clear_time() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& CarlifeCallRecords::time() const {
  return *time_;
}
inline void CarlifeCallRecords::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void CarlifeCallRecords::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void CarlifeCallRecords::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CarlifeCallRecords::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  return time_;
}
inline ::std::string* CarlifeCallRecords::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CarlifeCallRecords::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .com.baidu.carlife.protobuf.CarlifeCallRecords.CallRecordsType type = 6 [default = DEFAULT_TYPE];
inline bool CarlifeCallRecords::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CarlifeCallRecords::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CarlifeCallRecords::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CarlifeCallRecords::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::com::baidu::carlife::protobuf::CarlifeCallRecords_CallRecordsType CarlifeCallRecords::type() const {
  return static_cast< ::com::baidu::carlife::protobuf::CarlifeCallRecords_CallRecordsType >(type_);
}
inline void CarlifeCallRecords::set_type(::com::baidu::carlife::protobuf::CarlifeCallRecords_CallRecordsType value) {
  assert(::com::baidu::carlife::protobuf::CarlifeCallRecords_CallRecordsType_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace carlife
}  // namespace baidu
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::baidu::carlife::protobuf::CarlifeCallRecords_CallRecordsType>() {
  return ::com::baidu::carlife::protobuf::CarlifeCallRecords_CallRecordsType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CarlifeCallRecordsProto_2eproto__INCLUDED
