// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarlifeBTHfpIndicationProto.proto

#ifndef PROTOBUF_CarlifeBTHfpIndicationProto_2eproto__INCLUDED
#define PROTOBUF_CarlifeBTHfpIndicationProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace baidu {
namespace carlife {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CarlifeBTHfpIndicationProto_2eproto();
void protobuf_AssignDesc_CarlifeBTHfpIndicationProto_2eproto();
void protobuf_ShutdownFile_CarlifeBTHfpIndicationProto_2eproto();

class CarlifeBTHfpIndication;

// ===================================================================

class CarlifeBTHfpIndication : public ::google::protobuf::Message {
 public:
  CarlifeBTHfpIndication();
  virtual ~CarlifeBTHfpIndication();

  CarlifeBTHfpIndication(const CarlifeBTHfpIndication& from);

  inline CarlifeBTHfpIndication& operator=(const CarlifeBTHfpIndication& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CarlifeBTHfpIndication& default_instance();

  void Swap(CarlifeBTHfpIndication* other);

  // implements Message ----------------------------------------------

  CarlifeBTHfpIndication* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CarlifeBTHfpIndication& from);
  void MergeFrom(const CarlifeBTHfpIndication& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional string phoneNum = 2;
  inline bool has_phonenum() const;
  inline void clear_phonenum();
  static const int kPhoneNumFieldNumber = 2;
  inline const ::std::string& phonenum() const;
  inline void set_phonenum(const ::std::string& value);
  inline void set_phonenum(const char* value);
  inline void set_phonenum(const char* value, size_t size);
  inline ::std::string* mutable_phonenum();
  inline ::std::string* release_phonenum();
  inline void set_allocated_phonenum(::std::string* phonenum);

  // optional string phoneName = 3;
  inline bool has_phonename() const;
  inline void clear_phonename();
  static const int kPhoneNameFieldNumber = 3;
  inline const ::std::string& phonename() const;
  inline void set_phonename(const ::std::string& value);
  inline void set_phonename(const char* value);
  inline void set_phonename(const char* value, size_t size);
  inline ::std::string* mutable_phonename();
  inline ::std::string* release_phonename();
  inline void set_allocated_phonename(::std::string* phonename);

  // optional string address = 4;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 4;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:com.baidu.carlife.protobuf.CarlifeBTHfpIndication)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_phonenum();
  inline void clear_has_phonenum();
  inline void set_has_phonename();
  inline void clear_has_phonename();
  inline void set_has_address();
  inline void clear_has_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* phonenum_;
  ::std::string* phonename_;
  ::std::string* address_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CarlifeBTHfpIndicationProto_2eproto();
  friend void protobuf_AssignDesc_CarlifeBTHfpIndicationProto_2eproto();
  friend void protobuf_ShutdownFile_CarlifeBTHfpIndicationProto_2eproto();

  void InitAsDefaultInstance();
  static CarlifeBTHfpIndication* default_instance_;
};
// ===================================================================


// ===================================================================

// CarlifeBTHfpIndication

// required int32 state = 1;
inline bool CarlifeBTHfpIndication::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CarlifeBTHfpIndication::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CarlifeBTHfpIndication::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CarlifeBTHfpIndication::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 CarlifeBTHfpIndication::state() const {
  return state_;
}
inline void CarlifeBTHfpIndication::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional string phoneNum = 2;
inline bool CarlifeBTHfpIndication::has_phonenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CarlifeBTHfpIndication::set_has_phonenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CarlifeBTHfpIndication::clear_has_phonenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CarlifeBTHfpIndication::clear_phonenum() {
  if (phonenum_ != &::google::protobuf::internal::kEmptyString) {
    phonenum_->clear();
  }
  clear_has_phonenum();
}
inline const ::std::string& CarlifeBTHfpIndication::phonenum() const {
  return *phonenum_;
}
inline void CarlifeBTHfpIndication::set_phonenum(const ::std::string& value) {
  set_has_phonenum();
  if (phonenum_ == &::google::protobuf::internal::kEmptyString) {
    phonenum_ = new ::std::string;
  }
  phonenum_->assign(value);
}
inline void CarlifeBTHfpIndication::set_phonenum(const char* value) {
  set_has_phonenum();
  if (phonenum_ == &::google::protobuf::internal::kEmptyString) {
    phonenum_ = new ::std::string;
  }
  phonenum_->assign(value);
}
inline void CarlifeBTHfpIndication::set_phonenum(const char* value, size_t size) {
  set_has_phonenum();
  if (phonenum_ == &::google::protobuf::internal::kEmptyString) {
    phonenum_ = new ::std::string;
  }
  phonenum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CarlifeBTHfpIndication::mutable_phonenum() {
  set_has_phonenum();
  if (phonenum_ == &::google::protobuf::internal::kEmptyString) {
    phonenum_ = new ::std::string;
  }
  return phonenum_;
}
inline ::std::string* CarlifeBTHfpIndication::release_phonenum() {
  clear_has_phonenum();
  if (phonenum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phonenum_;
    phonenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CarlifeBTHfpIndication::set_allocated_phonenum(::std::string* phonenum) {
  if (phonenum_ != &::google::protobuf::internal::kEmptyString) {
    delete phonenum_;
  }
  if (phonenum) {
    set_has_phonenum();
    phonenum_ = phonenum;
  } else {
    clear_has_phonenum();
    phonenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string phoneName = 3;
inline bool CarlifeBTHfpIndication::has_phonename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CarlifeBTHfpIndication::set_has_phonename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CarlifeBTHfpIndication::clear_has_phonename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CarlifeBTHfpIndication::clear_phonename() {
  if (phonename_ != &::google::protobuf::internal::kEmptyString) {
    phonename_->clear();
  }
  clear_has_phonename();
}
inline const ::std::string& CarlifeBTHfpIndication::phonename() const {
  return *phonename_;
}
inline void CarlifeBTHfpIndication::set_phonename(const ::std::string& value) {
  set_has_phonename();
  if (phonename_ == &::google::protobuf::internal::kEmptyString) {
    phonename_ = new ::std::string;
  }
  phonename_->assign(value);
}
inline void CarlifeBTHfpIndication::set_phonename(const char* value) {
  set_has_phonename();
  if (phonename_ == &::google::protobuf::internal::kEmptyString) {
    phonename_ = new ::std::string;
  }
  phonename_->assign(value);
}
inline void CarlifeBTHfpIndication::set_phonename(const char* value, size_t size) {
  set_has_phonename();
  if (phonename_ == &::google::protobuf::internal::kEmptyString) {
    phonename_ = new ::std::string;
  }
  phonename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CarlifeBTHfpIndication::mutable_phonename() {
  set_has_phonename();
  if (phonename_ == &::google::protobuf::internal::kEmptyString) {
    phonename_ = new ::std::string;
  }
  return phonename_;
}
inline ::std::string* CarlifeBTHfpIndication::release_phonename() {
  clear_has_phonename();
  if (phonename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phonename_;
    phonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CarlifeBTHfpIndication::set_allocated_phonename(::std::string* phonename) {
  if (phonename_ != &::google::protobuf::internal::kEmptyString) {
    delete phonename_;
  }
  if (phonename) {
    set_has_phonename();
    phonename_ = phonename;
  } else {
    clear_has_phonename();
    phonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string address = 4;
inline bool CarlifeBTHfpIndication::has_address() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CarlifeBTHfpIndication::set_has_address() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CarlifeBTHfpIndication::clear_has_address() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CarlifeBTHfpIndication::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& CarlifeBTHfpIndication::address() const {
  return *address_;
}
inline void CarlifeBTHfpIndication::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void CarlifeBTHfpIndication::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void CarlifeBTHfpIndication::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CarlifeBTHfpIndication::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* CarlifeBTHfpIndication::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CarlifeBTHfpIndication::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace carlife
}  // namespace baidu
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CarlifeBTHfpIndicationProto_2eproto__INCLUDED
