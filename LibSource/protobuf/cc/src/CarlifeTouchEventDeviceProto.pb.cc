// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarlifeTouchEventDeviceProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CarlifeTouchEventDeviceProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace baidu {
namespace carlife {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* CarlifeTouchEventDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarlifeTouchEventDevice_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CarlifeTouchEventDeviceProto_2eproto() {
  protobuf_AddDesc_CarlifeTouchEventDeviceProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CarlifeTouchEventDeviceProto.proto");
  GOOGLE_CHECK(file != NULL);
  CarlifeTouchEventDevice_descriptor_ = file->message_type(0);
  static const int CarlifeTouchEventDevice_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchEventDevice, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchEventDevice, eventx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchEventDevice, screen_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchEventDevice, screen_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchEventDevice, abs_x_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchEventDevice, abs_x_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchEventDevice, abs_y_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchEventDevice, abs_y_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchEventDevice, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchEventDevice, downevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchEventDevice, upevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchEventDevice, moveevent_),
  };
  CarlifeTouchEventDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarlifeTouchEventDevice_descriptor_,
      CarlifeTouchEventDevice::default_instance_,
      CarlifeTouchEventDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchEventDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchEventDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarlifeTouchEventDevice));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CarlifeTouchEventDeviceProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarlifeTouchEventDevice_descriptor_, &CarlifeTouchEventDevice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CarlifeTouchEventDeviceProto_2eproto() {
  delete CarlifeTouchEventDevice::default_instance_;
  delete CarlifeTouchEventDevice_reflection_;
}

void protobuf_AddDesc_CarlifeTouchEventDeviceProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::baidu::carlife::protobuf::protobuf_AddDesc_CarlifeTouchEventProto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"CarlifeTouchEventDeviceProto.proto\022\032co"
    "m.baidu.carlife.protobuf\032\034CarlifeTouchEv"
    "entProto.proto\"\203\003\n\027CarlifeTouchEventDevi"
    "ce\022\013\n\003cid\030\001 \002(\005\022\016\n\006eventx\030\002 \002(\005\022\024\n\014scree"
    "n_width\030\003 \002(\005\022\025\n\rscreen_height\030\004 \002(\005\022\021\n\t"
    "abs_x_min\030\005 \002(\005\022\021\n\tabs_x_max\030\006 \002(\005\022\021\n\tab"
    "s_y_min\030\007 \002(\005\022\021\n\tabs_y_max\030\010 \002(\005\022\016\n\006devi"
    "ce\030\t \002(\t\022@\n\tdownEvent\030\n \003(\0132-.com.baidu."
    "carlife.protobuf.CarlifeTouchEvent\022>\n\007up"
    "Event\030\013 \003(\0132-.com.baidu.carlife.protobuf"
    ".CarlifeTouchEvent\022@\n\tmoveEvent\030\014 \003(\0132-."
    "com.baidu.carlife.protobuf.CarlifeTouchE"
    "vent", 484);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CarlifeTouchEventDeviceProto.proto", &protobuf_RegisterTypes);
  CarlifeTouchEventDevice::default_instance_ = new CarlifeTouchEventDevice();
  CarlifeTouchEventDevice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CarlifeTouchEventDeviceProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CarlifeTouchEventDeviceProto_2eproto {
  StaticDescriptorInitializer_CarlifeTouchEventDeviceProto_2eproto() {
    protobuf_AddDesc_CarlifeTouchEventDeviceProto_2eproto();
  }
} static_descriptor_initializer_CarlifeTouchEventDeviceProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CarlifeTouchEventDevice::kCidFieldNumber;
const int CarlifeTouchEventDevice::kEventxFieldNumber;
const int CarlifeTouchEventDevice::kScreenWidthFieldNumber;
const int CarlifeTouchEventDevice::kScreenHeightFieldNumber;
const int CarlifeTouchEventDevice::kAbsXMinFieldNumber;
const int CarlifeTouchEventDevice::kAbsXMaxFieldNumber;
const int CarlifeTouchEventDevice::kAbsYMinFieldNumber;
const int CarlifeTouchEventDevice::kAbsYMaxFieldNumber;
const int CarlifeTouchEventDevice::kDeviceFieldNumber;
const int CarlifeTouchEventDevice::kDownEventFieldNumber;
const int CarlifeTouchEventDevice::kUpEventFieldNumber;
const int CarlifeTouchEventDevice::kMoveEventFieldNumber;
#endif  // !_MSC_VER

CarlifeTouchEventDevice::CarlifeTouchEventDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CarlifeTouchEventDevice::InitAsDefaultInstance() {
}

CarlifeTouchEventDevice::CarlifeTouchEventDevice(const CarlifeTouchEventDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CarlifeTouchEventDevice::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0;
  eventx_ = 0;
  screen_width_ = 0;
  screen_height_ = 0;
  abs_x_min_ = 0;
  abs_x_max_ = 0;
  abs_y_min_ = 0;
  abs_y_max_ = 0;
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarlifeTouchEventDevice::~CarlifeTouchEventDevice() {
  SharedDtor();
}

void CarlifeTouchEventDevice::SharedDtor() {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (this != default_instance_) {
  }
}

void CarlifeTouchEventDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarlifeTouchEventDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarlifeTouchEventDevice_descriptor_;
}

const CarlifeTouchEventDevice& CarlifeTouchEventDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarlifeTouchEventDeviceProto_2eproto();
  return *default_instance_;
}

CarlifeTouchEventDevice* CarlifeTouchEventDevice::default_instance_ = NULL;

CarlifeTouchEventDevice* CarlifeTouchEventDevice::New() const {
  return new CarlifeTouchEventDevice;
}

void CarlifeTouchEventDevice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0;
    eventx_ = 0;
    screen_width_ = 0;
    screen_height_ = 0;
    abs_x_min_ = 0;
    abs_x_max_ = 0;
    abs_y_min_ = 0;
    abs_y_max_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
  }
  downevent_.Clear();
  upevent_.Clear();
  moveevent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarlifeTouchEventDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eventx;
        break;
      }

      // required int32 eventx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventx_)));
          set_has_eventx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_screen_width;
        break;
      }

      // required int32 screen_width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_width_)));
          set_has_screen_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_screen_height;
        break;
      }

      // required int32 screen_height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_height_)));
          set_has_screen_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_abs_x_min;
        break;
      }

      // required int32 abs_x_min = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_abs_x_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abs_x_min_)));
          set_has_abs_x_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_abs_x_max;
        break;
      }

      // required int32 abs_x_max = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_abs_x_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abs_x_max_)));
          set_has_abs_x_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_abs_y_min;
        break;
      }

      // required int32 abs_y_min = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_abs_y_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abs_y_min_)));
          set_has_abs_y_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_abs_y_max;
        break;
      }

      // required int32 abs_y_max = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_abs_y_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abs_y_max_)));
          set_has_abs_y_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_device;
        break;
      }

      // required string device = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_downEvent;
        break;
      }

      // repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent downEvent = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_downEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_downevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_downEvent;
        if (input->ExpectTag(90)) goto parse_upEvent;
        break;
      }

      // repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent upEvent = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_upEvent;
        if (input->ExpectTag(98)) goto parse_moveEvent;
        break;
      }

      // repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent moveEvent = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moveEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moveevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_moveEvent;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CarlifeTouchEventDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cid(), output);
  }

  // required int32 eventx = 2;
  if (has_eventx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eventx(), output);
  }

  // required int32 screen_width = 3;
  if (has_screen_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->screen_width(), output);
  }

  // required int32 screen_height = 4;
  if (has_screen_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->screen_height(), output);
  }

  // required int32 abs_x_min = 5;
  if (has_abs_x_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->abs_x_min(), output);
  }

  // required int32 abs_x_max = 6;
  if (has_abs_x_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->abs_x_max(), output);
  }

  // required int32 abs_y_min = 7;
  if (has_abs_y_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->abs_y_min(), output);
  }

  // required int32 abs_y_max = 8;
  if (has_abs_y_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->abs_y_max(), output);
  }

  // required string device = 9;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->device(), output);
  }

  // repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent downEvent = 10;
  for (int i = 0; i < this->downevent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->downevent(i), output);
  }

  // repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent upEvent = 11;
  for (int i = 0; i < this->upevent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->upevent(i), output);
  }

  // repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent moveEvent = 12;
  for (int i = 0; i < this->moveevent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->moveevent(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CarlifeTouchEventDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cid(), target);
  }

  // required int32 eventx = 2;
  if (has_eventx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eventx(), target);
  }

  // required int32 screen_width = 3;
  if (has_screen_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->screen_width(), target);
  }

  // required int32 screen_height = 4;
  if (has_screen_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->screen_height(), target);
  }

  // required int32 abs_x_min = 5;
  if (has_abs_x_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->abs_x_min(), target);
  }

  // required int32 abs_x_max = 6;
  if (has_abs_x_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->abs_x_max(), target);
  }

  // required int32 abs_y_min = 7;
  if (has_abs_y_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->abs_y_min(), target);
  }

  // required int32 abs_y_max = 8;
  if (has_abs_y_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->abs_y_max(), target);
  }

  // required string device = 9;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->device(), target);
  }

  // repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent downEvent = 10;
  for (int i = 0; i < this->downevent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->downevent(i), target);
  }

  // repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent upEvent = 11;
  for (int i = 0; i < this->upevent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->upevent(i), target);
  }

  // repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent moveEvent = 12;
  for (int i = 0; i < this->moveevent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->moveevent(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CarlifeTouchEventDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cid());
    }

    // required int32 eventx = 2;
    if (has_eventx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventx());
    }

    // required int32 screen_width = 3;
    if (has_screen_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_width());
    }

    // required int32 screen_height = 4;
    if (has_screen_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_height());
    }

    // required int32 abs_x_min = 5;
    if (has_abs_x_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->abs_x_min());
    }

    // required int32 abs_x_max = 6;
    if (has_abs_x_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->abs_x_max());
    }

    // required int32 abs_y_min = 7;
    if (has_abs_y_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->abs_y_min());
    }

    // required int32 abs_y_max = 8;
    if (has_abs_y_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->abs_y_max());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string device = 9;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

  }
  // repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent downEvent = 10;
  total_size += 1 * this->downevent_size();
  for (int i = 0; i < this->downevent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->downevent(i));
  }

  // repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent upEvent = 11;
  total_size += 1 * this->upevent_size();
  for (int i = 0; i < this->upevent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upevent(i));
  }

  // repeated .com.baidu.carlife.protobuf.CarlifeTouchEvent moveEvent = 12;
  total_size += 1 * this->moveevent_size();
  for (int i = 0; i < this->moveevent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moveevent(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarlifeTouchEventDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarlifeTouchEventDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarlifeTouchEventDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarlifeTouchEventDevice::MergeFrom(const CarlifeTouchEventDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  downevent_.MergeFrom(from.downevent_);
  upevent_.MergeFrom(from.upevent_);
  moveevent_.MergeFrom(from.moveevent_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_eventx()) {
      set_eventx(from.eventx());
    }
    if (from.has_screen_width()) {
      set_screen_width(from.screen_width());
    }
    if (from.has_screen_height()) {
      set_screen_height(from.screen_height());
    }
    if (from.has_abs_x_min()) {
      set_abs_x_min(from.abs_x_min());
    }
    if (from.has_abs_x_max()) {
      set_abs_x_max(from.abs_x_max());
    }
    if (from.has_abs_y_min()) {
      set_abs_y_min(from.abs_y_min());
    }
    if (from.has_abs_y_max()) {
      set_abs_y_max(from.abs_y_max());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_device()) {
      set_device(from.device());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarlifeTouchEventDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarlifeTouchEventDevice::CopyFrom(const CarlifeTouchEventDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarlifeTouchEventDevice::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  for (int i = 0; i < downevent_size(); i++) {
    if (!this->downevent(i).IsInitialized()) return false;
  }
  for (int i = 0; i < upevent_size(); i++) {
    if (!this->upevent(i).IsInitialized()) return false;
  }
  for (int i = 0; i < moveevent_size(); i++) {
    if (!this->moveevent(i).IsInitialized()) return false;
  }
  return true;
}

void CarlifeTouchEventDevice::Swap(CarlifeTouchEventDevice* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(eventx_, other->eventx_);
    std::swap(screen_width_, other->screen_width_);
    std::swap(screen_height_, other->screen_height_);
    std::swap(abs_x_min_, other->abs_x_min_);
    std::swap(abs_x_max_, other->abs_x_max_);
    std::swap(abs_y_min_, other->abs_y_min_);
    std::swap(abs_y_max_, other->abs_y_max_);
    std::swap(device_, other->device_);
    downevent_.Swap(&other->downevent_);
    upevent_.Swap(&other->upevent_);
    moveevent_.Swap(&other->moveevent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarlifeTouchEventDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarlifeTouchEventDevice_descriptor_;
  metadata.reflection = CarlifeTouchEventDevice_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace carlife
}  // namespace baidu
}  // namespace com

// @@protoc_insertion_point(global_scope)
