// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarlifeNaviAssitantGuideInfoProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CarlifeNaviAssitantGuideInfoProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace baidu {
namespace carlife {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* CarlifeNaviAssitantGuideInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarlifeNaviAssitantGuideInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CarlifeNaviAssitantGuideInfoProto_2eproto() {
  protobuf_AddDesc_CarlifeNaviAssitantGuideInfoProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CarlifeNaviAssitantGuideInfoProto.proto");
  GOOGLE_CHECK(file != NULL);
  CarlifeNaviAssitantGuideInfo_descriptor_ = file->message_type(0);
  static const int CarlifeNaviAssitantGuideInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeNaviAssitantGuideInfo, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeNaviAssitantGuideInfo, assistanttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeNaviAssitantGuideInfo, trafficsigntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeNaviAssitantGuideInfo, totaldistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeNaviAssitantGuideInfo, remaindistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeNaviAssitantGuideInfo, cameraspeed_),
  };
  CarlifeNaviAssitantGuideInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarlifeNaviAssitantGuideInfo_descriptor_,
      CarlifeNaviAssitantGuideInfo::default_instance_,
      CarlifeNaviAssitantGuideInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeNaviAssitantGuideInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeNaviAssitantGuideInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarlifeNaviAssitantGuideInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CarlifeNaviAssitantGuideInfoProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarlifeNaviAssitantGuideInfo_descriptor_, &CarlifeNaviAssitantGuideInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CarlifeNaviAssitantGuideInfoProto_2eproto() {
  delete CarlifeNaviAssitantGuideInfo::default_instance_;
  delete CarlifeNaviAssitantGuideInfo_reflection_;
}

void protobuf_AddDesc_CarlifeNaviAssitantGuideInfoProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'CarlifeNaviAssitantGuideInfoProto.prot"
    "o\022\032com.baidu.carlife.protobuf\"\242\001\n\034Carlif"
    "eNaviAssitantGuideInfo\022\016\n\006action\030\001 \002(\005\022\025"
    "\n\rassistantType\030\002 \002(\005\022\027\n\017trafficSignType"
    "\030\003 \002(\005\022\025\n\rtotalDistance\030\004 \002(\005\022\026\n\016remainD"
    "istance\030\005 \002(\005\022\023\n\013cameraSpeed\030\006 \002(\005", 234);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CarlifeNaviAssitantGuideInfoProto.proto", &protobuf_RegisterTypes);
  CarlifeNaviAssitantGuideInfo::default_instance_ = new CarlifeNaviAssitantGuideInfo();
  CarlifeNaviAssitantGuideInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CarlifeNaviAssitantGuideInfoProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CarlifeNaviAssitantGuideInfoProto_2eproto {
  StaticDescriptorInitializer_CarlifeNaviAssitantGuideInfoProto_2eproto() {
    protobuf_AddDesc_CarlifeNaviAssitantGuideInfoProto_2eproto();
  }
} static_descriptor_initializer_CarlifeNaviAssitantGuideInfoProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CarlifeNaviAssitantGuideInfo::kActionFieldNumber;
const int CarlifeNaviAssitantGuideInfo::kAssistantTypeFieldNumber;
const int CarlifeNaviAssitantGuideInfo::kTrafficSignTypeFieldNumber;
const int CarlifeNaviAssitantGuideInfo::kTotalDistanceFieldNumber;
const int CarlifeNaviAssitantGuideInfo::kRemainDistanceFieldNumber;
const int CarlifeNaviAssitantGuideInfo::kCameraSpeedFieldNumber;
#endif  // !_MSC_VER

CarlifeNaviAssitantGuideInfo::CarlifeNaviAssitantGuideInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CarlifeNaviAssitantGuideInfo::InitAsDefaultInstance() {
}

CarlifeNaviAssitantGuideInfo::CarlifeNaviAssitantGuideInfo(const CarlifeNaviAssitantGuideInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CarlifeNaviAssitantGuideInfo::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  assistanttype_ = 0;
  trafficsigntype_ = 0;
  totaldistance_ = 0;
  remaindistance_ = 0;
  cameraspeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarlifeNaviAssitantGuideInfo::~CarlifeNaviAssitantGuideInfo() {
  SharedDtor();
}

void CarlifeNaviAssitantGuideInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CarlifeNaviAssitantGuideInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarlifeNaviAssitantGuideInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarlifeNaviAssitantGuideInfo_descriptor_;
}

const CarlifeNaviAssitantGuideInfo& CarlifeNaviAssitantGuideInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarlifeNaviAssitantGuideInfoProto_2eproto();
  return *default_instance_;
}

CarlifeNaviAssitantGuideInfo* CarlifeNaviAssitantGuideInfo::default_instance_ = NULL;

CarlifeNaviAssitantGuideInfo* CarlifeNaviAssitantGuideInfo::New() const {
  return new CarlifeNaviAssitantGuideInfo;
}

void CarlifeNaviAssitantGuideInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
    assistanttype_ = 0;
    trafficsigntype_ = 0;
    totaldistance_ = 0;
    remaindistance_ = 0;
    cameraspeed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarlifeNaviAssitantGuideInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_assistantType;
        break;
      }

      // required int32 assistantType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assistantType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assistanttype_)));
          set_has_assistanttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_trafficSignType;
        break;
      }

      // required int32 trafficSignType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trafficSignType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trafficsigntype_)));
          set_has_trafficsigntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalDistance;
        break;
      }

      // required int32 totalDistance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaldistance_)));
          set_has_totaldistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remainDistance;
        break;
      }

      // required int32 remainDistance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaindistance_)));
          set_has_remaindistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cameraSpeed;
        break;
      }

      // required int32 cameraSpeed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cameraSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cameraspeed_)));
          set_has_cameraspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CarlifeNaviAssitantGuideInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }

  // required int32 assistantType = 2;
  if (has_assistanttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->assistanttype(), output);
  }

  // required int32 trafficSignType = 3;
  if (has_trafficsigntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->trafficsigntype(), output);
  }

  // required int32 totalDistance = 4;
  if (has_totaldistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totaldistance(), output);
  }

  // required int32 remainDistance = 5;
  if (has_remaindistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->remaindistance(), output);
  }

  // required int32 cameraSpeed = 6;
  if (has_cameraspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cameraspeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CarlifeNaviAssitantGuideInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }

  // required int32 assistantType = 2;
  if (has_assistanttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->assistanttype(), target);
  }

  // required int32 trafficSignType = 3;
  if (has_trafficsigntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->trafficsigntype(), target);
  }

  // required int32 totalDistance = 4;
  if (has_totaldistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totaldistance(), target);
  }

  // required int32 remainDistance = 5;
  if (has_remaindistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->remaindistance(), target);
  }

  // required int32 cameraSpeed = 6;
  if (has_cameraspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cameraspeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CarlifeNaviAssitantGuideInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

    // required int32 assistantType = 2;
    if (has_assistanttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assistanttype());
    }

    // required int32 trafficSignType = 3;
    if (has_trafficsigntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trafficsigntype());
    }

    // required int32 totalDistance = 4;
    if (has_totaldistance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totaldistance());
    }

    // required int32 remainDistance = 5;
    if (has_remaindistance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaindistance());
    }

    // required int32 cameraSpeed = 6;
    if (has_cameraspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cameraspeed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarlifeNaviAssitantGuideInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarlifeNaviAssitantGuideInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarlifeNaviAssitantGuideInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarlifeNaviAssitantGuideInfo::MergeFrom(const CarlifeNaviAssitantGuideInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_assistanttype()) {
      set_assistanttype(from.assistanttype());
    }
    if (from.has_trafficsigntype()) {
      set_trafficsigntype(from.trafficsigntype());
    }
    if (from.has_totaldistance()) {
      set_totaldistance(from.totaldistance());
    }
    if (from.has_remaindistance()) {
      set_remaindistance(from.remaindistance());
    }
    if (from.has_cameraspeed()) {
      set_cameraspeed(from.cameraspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarlifeNaviAssitantGuideInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarlifeNaviAssitantGuideInfo::CopyFrom(const CarlifeNaviAssitantGuideInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarlifeNaviAssitantGuideInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CarlifeNaviAssitantGuideInfo::Swap(CarlifeNaviAssitantGuideInfo* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(assistanttype_, other->assistanttype_);
    std::swap(trafficsigntype_, other->trafficsigntype_);
    std::swap(totaldistance_, other->totaldistance_);
    std::swap(remaindistance_, other->remaindistance_);
    std::swap(cameraspeed_, other->cameraspeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarlifeNaviAssitantGuideInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarlifeNaviAssitantGuideInfo_descriptor_;
  metadata.reflection = CarlifeNaviAssitantGuideInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace carlife
}  // namespace baidu
}  // namespace com

// @@protoc_insertion_point(global_scope)
