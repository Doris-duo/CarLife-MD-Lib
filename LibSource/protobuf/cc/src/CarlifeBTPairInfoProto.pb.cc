// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarlifeBTPairInfoProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CarlifeBTPairInfoProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace baidu {
namespace carlife {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* CarlifeBTPairInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarlifeBTPairInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CarlifeBTPairInfoProto_2eproto() {
  protobuf_AddDesc_CarlifeBTPairInfoProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CarlifeBTPairInfoProto.proto");
  GOOGLE_CHECK(file != NULL);
  CarlifeBTPairInfo_descriptor_ = file->message_type(0);
  static const int CarlifeBTPairInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeBTPairInfo, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeBTPairInfo, passkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeBTPairInfo, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeBTPairInfo, randomizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeBTPairInfo, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeBTPairInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeBTPairInfo, status_),
  };
  CarlifeBTPairInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarlifeBTPairInfo_descriptor_,
      CarlifeBTPairInfo::default_instance_,
      CarlifeBTPairInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeBTPairInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeBTPairInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarlifeBTPairInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CarlifeBTPairInfoProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarlifeBTPairInfo_descriptor_, &CarlifeBTPairInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CarlifeBTPairInfoProto_2eproto() {
  delete CarlifeBTPairInfo::default_instance_;
  delete CarlifeBTPairInfo_reflection_;
}

void protobuf_AddDesc_CarlifeBTPairInfoProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034CarlifeBTPairInfoProto.proto\022\032com.baid"
    "u.carlife.protobuf\"\203\001\n\021CarlifeBTPairInfo"
    "\022\017\n\007address\030\001 \002(\t\022\017\n\007passKey\030\002 \001(\t\022\014\n\004ha"
    "sh\030\003 \001(\t\022\022\n\nrandomizer\030\004 \001(\t\022\014\n\004uuid\030\005 \002"
    "(\t\022\014\n\004name\030\006 \002(\t\022\016\n\006status\030\007 \002(\005", 192);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CarlifeBTPairInfoProto.proto", &protobuf_RegisterTypes);
  CarlifeBTPairInfo::default_instance_ = new CarlifeBTPairInfo();
  CarlifeBTPairInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CarlifeBTPairInfoProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CarlifeBTPairInfoProto_2eproto {
  StaticDescriptorInitializer_CarlifeBTPairInfoProto_2eproto() {
    protobuf_AddDesc_CarlifeBTPairInfoProto_2eproto();
  }
} static_descriptor_initializer_CarlifeBTPairInfoProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CarlifeBTPairInfo::kAddressFieldNumber;
const int CarlifeBTPairInfo::kPassKeyFieldNumber;
const int CarlifeBTPairInfo::kHashFieldNumber;
const int CarlifeBTPairInfo::kRandomizerFieldNumber;
const int CarlifeBTPairInfo::kUuidFieldNumber;
const int CarlifeBTPairInfo::kNameFieldNumber;
const int CarlifeBTPairInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

CarlifeBTPairInfo::CarlifeBTPairInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CarlifeBTPairInfo::InitAsDefaultInstance() {
}

CarlifeBTPairInfo::CarlifeBTPairInfo(const CarlifeBTPairInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CarlifeBTPairInfo::SharedCtor() {
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  randomizer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarlifeBTPairInfo::~CarlifeBTPairInfo() {
  SharedDtor();
}

void CarlifeBTPairInfo::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (passkey_ != &::google::protobuf::internal::kEmptyString) {
    delete passkey_;
  }
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (randomizer_ != &::google::protobuf::internal::kEmptyString) {
    delete randomizer_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CarlifeBTPairInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarlifeBTPairInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarlifeBTPairInfo_descriptor_;
}

const CarlifeBTPairInfo& CarlifeBTPairInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarlifeBTPairInfoProto_2eproto();
  return *default_instance_;
}

CarlifeBTPairInfo* CarlifeBTPairInfo::default_instance_ = NULL;

CarlifeBTPairInfo* CarlifeBTPairInfo::New() const {
  return new CarlifeBTPairInfo;
}

void CarlifeBTPairInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_passkey()) {
      if (passkey_ != &::google::protobuf::internal::kEmptyString) {
        passkey_->clear();
      }
    }
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::kEmptyString) {
        hash_->clear();
      }
    }
    if (has_randomizer()) {
      if (randomizer_ != &::google::protobuf::internal::kEmptyString) {
        randomizer_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarlifeBTPairInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passKey;
        break;
      }

      // optional string passKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passkey().data(), this->passkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hash;
        break;
      }

      // optional string hash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_randomizer;
        break;
      }

      // optional string randomizer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randomizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_randomizer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->randomizer().data(), this->randomizer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_uuid;
        break;
      }

      // required string uuid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // required string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // required int32 status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CarlifeBTPairInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->address(), output);
  }

  // optional string passKey = 2;
  if (has_passkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passkey().data(), this->passkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->passkey(), output);
  }

  // optional string hash = 3;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->hash(), output);
  }

  // optional string randomizer = 4;
  if (has_randomizer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randomizer().data(), this->randomizer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->randomizer(), output);
  }

  // required string uuid = 5;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->uuid(), output);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }

  // required int32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CarlifeBTPairInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // optional string passKey = 2;
  if (has_passkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passkey().data(), this->passkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passkey(), target);
  }

  // optional string hash = 3;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hash(), target);
  }

  // optional string randomizer = 4;
  if (has_randomizer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randomizer().data(), this->randomizer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->randomizer(), target);
  }

  // required string uuid = 5;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->uuid(), target);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // required int32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CarlifeBTPairInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional string passKey = 2;
    if (has_passkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passkey());
    }

    // optional string hash = 3;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }

    // optional string randomizer = 4;
    if (has_randomizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->randomizer());
    }

    // required string uuid = 5;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // required string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarlifeBTPairInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarlifeBTPairInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarlifeBTPairInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarlifeBTPairInfo::MergeFrom(const CarlifeBTPairInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_passkey()) {
      set_passkey(from.passkey());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_randomizer()) {
      set_randomizer(from.randomizer());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarlifeBTPairInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarlifeBTPairInfo::CopyFrom(const CarlifeBTPairInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarlifeBTPairInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000071) != 0x00000071) return false;

  return true;
}

void CarlifeBTPairInfo::Swap(CarlifeBTPairInfo* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(passkey_, other->passkey_);
    std::swap(hash_, other->hash_);
    std::swap(randomizer_, other->randomizer_);
    std::swap(uuid_, other->uuid_);
    std::swap(name_, other->name_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarlifeBTPairInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarlifeBTPairInfo_descriptor_;
  metadata.reflection = CarlifeBTPairInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace carlife
}  // namespace baidu
}  // namespace com

// @@protoc_insertion_point(global_scope)
