// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarlifeNaviNextTurnInfoProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CarlifeNaviNextTurnInfoProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace baidu {
namespace carlife {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* CarlifeNaviNextTurnInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarlifeNaviNextTurnInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CarlifeNaviNextTurnInfoProto_2eproto() {
  protobuf_AddDesc_CarlifeNaviNextTurnInfoProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CarlifeNaviNextTurnInfoProto.proto");
  GOOGLE_CHECK(file != NULL);
  CarlifeNaviNextTurnInfo_descriptor_ = file->message_type(0);
  static const int CarlifeNaviNextTurnInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeNaviNextTurnInfo, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeNaviNextTurnInfo, nextturn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeNaviNextTurnInfo, roadname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeNaviNextTurnInfo, totaldistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeNaviNextTurnInfo, remaindistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeNaviNextTurnInfo, time_),
  };
  CarlifeNaviNextTurnInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarlifeNaviNextTurnInfo_descriptor_,
      CarlifeNaviNextTurnInfo::default_instance_,
      CarlifeNaviNextTurnInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeNaviNextTurnInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeNaviNextTurnInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarlifeNaviNextTurnInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CarlifeNaviNextTurnInfoProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarlifeNaviNextTurnInfo_descriptor_, &CarlifeNaviNextTurnInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CarlifeNaviNextTurnInfoProto_2eproto() {
  delete CarlifeNaviNextTurnInfo::default_instance_;
  delete CarlifeNaviNextTurnInfo_reflection_;
}

void protobuf_AddDesc_CarlifeNaviNextTurnInfoProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"CarlifeNaviNextTurnInfoProto.proto\022\032co"
    "m.baidu.carlife.protobuf\"\212\001\n\027CarlifeNavi"
    "NextTurnInfo\022\016\n\006action\030\001 \002(\005\022\020\n\010nextTurn"
    "\030\002 \002(\005\022\020\n\010roadName\030\003 \002(\t\022\025\n\rtotalDistanc"
    "e\030\004 \002(\005\022\026\n\016remainDistance\030\005 \002(\005\022\014\n\004time\030"
    "\006 \002(\005", 205);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CarlifeNaviNextTurnInfoProto.proto", &protobuf_RegisterTypes);
  CarlifeNaviNextTurnInfo::default_instance_ = new CarlifeNaviNextTurnInfo();
  CarlifeNaviNextTurnInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CarlifeNaviNextTurnInfoProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CarlifeNaviNextTurnInfoProto_2eproto {
  StaticDescriptorInitializer_CarlifeNaviNextTurnInfoProto_2eproto() {
    protobuf_AddDesc_CarlifeNaviNextTurnInfoProto_2eproto();
  }
} static_descriptor_initializer_CarlifeNaviNextTurnInfoProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CarlifeNaviNextTurnInfo::kActionFieldNumber;
const int CarlifeNaviNextTurnInfo::kNextTurnFieldNumber;
const int CarlifeNaviNextTurnInfo::kRoadNameFieldNumber;
const int CarlifeNaviNextTurnInfo::kTotalDistanceFieldNumber;
const int CarlifeNaviNextTurnInfo::kRemainDistanceFieldNumber;
const int CarlifeNaviNextTurnInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

CarlifeNaviNextTurnInfo::CarlifeNaviNextTurnInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CarlifeNaviNextTurnInfo::InitAsDefaultInstance() {
}

CarlifeNaviNextTurnInfo::CarlifeNaviNextTurnInfo(const CarlifeNaviNextTurnInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CarlifeNaviNextTurnInfo::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  nextturn_ = 0;
  roadname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totaldistance_ = 0;
  remaindistance_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarlifeNaviNextTurnInfo::~CarlifeNaviNextTurnInfo() {
  SharedDtor();
}

void CarlifeNaviNextTurnInfo::SharedDtor() {
  if (roadname_ != &::google::protobuf::internal::kEmptyString) {
    delete roadname_;
  }
  if (this != default_instance_) {
  }
}

void CarlifeNaviNextTurnInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarlifeNaviNextTurnInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarlifeNaviNextTurnInfo_descriptor_;
}

const CarlifeNaviNextTurnInfo& CarlifeNaviNextTurnInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarlifeNaviNextTurnInfoProto_2eproto();
  return *default_instance_;
}

CarlifeNaviNextTurnInfo* CarlifeNaviNextTurnInfo::default_instance_ = NULL;

CarlifeNaviNextTurnInfo* CarlifeNaviNextTurnInfo::New() const {
  return new CarlifeNaviNextTurnInfo;
}

void CarlifeNaviNextTurnInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
    nextturn_ = 0;
    if (has_roadname()) {
      if (roadname_ != &::google::protobuf::internal::kEmptyString) {
        roadname_->clear();
      }
    }
    totaldistance_ = 0;
    remaindistance_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarlifeNaviNextTurnInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nextTurn;
        break;
      }

      // required int32 nextTurn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextTurn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextturn_)));
          set_has_nextturn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roadName;
        break;
      }

      // required string roadName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roadName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roadname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roadname().data(), this->roadname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalDistance;
        break;
      }

      // required int32 totalDistance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaldistance_)));
          set_has_totaldistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remainDistance;
        break;
      }

      // required int32 remainDistance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaindistance_)));
          set_has_remaindistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // required int32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CarlifeNaviNextTurnInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }

  // required int32 nextTurn = 2;
  if (has_nextturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nextturn(), output);
  }

  // required string roadName = 3;
  if (has_roadname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roadname().data(), this->roadname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->roadname(), output);
  }

  // required int32 totalDistance = 4;
  if (has_totaldistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totaldistance(), output);
  }

  // required int32 remainDistance = 5;
  if (has_remaindistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->remaindistance(), output);
  }

  // required int32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CarlifeNaviNextTurnInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }

  // required int32 nextTurn = 2;
  if (has_nextturn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nextturn(), target);
  }

  // required string roadName = 3;
  if (has_roadname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roadname().data(), this->roadname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roadname(), target);
  }

  // required int32 totalDistance = 4;
  if (has_totaldistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totaldistance(), target);
  }

  // required int32 remainDistance = 5;
  if (has_remaindistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->remaindistance(), target);
  }

  // required int32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CarlifeNaviNextTurnInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

    // required int32 nextTurn = 2;
    if (has_nextturn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextturn());
    }

    // required string roadName = 3;
    if (has_roadname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roadname());
    }

    // required int32 totalDistance = 4;
    if (has_totaldistance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totaldistance());
    }

    // required int32 remainDistance = 5;
    if (has_remaindistance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaindistance());
    }

    // required int32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarlifeNaviNextTurnInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarlifeNaviNextTurnInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarlifeNaviNextTurnInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarlifeNaviNextTurnInfo::MergeFrom(const CarlifeNaviNextTurnInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_nextturn()) {
      set_nextturn(from.nextturn());
    }
    if (from.has_roadname()) {
      set_roadname(from.roadname());
    }
    if (from.has_totaldistance()) {
      set_totaldistance(from.totaldistance());
    }
    if (from.has_remaindistance()) {
      set_remaindistance(from.remaindistance());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarlifeNaviNextTurnInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarlifeNaviNextTurnInfo::CopyFrom(const CarlifeNaviNextTurnInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarlifeNaviNextTurnInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CarlifeNaviNextTurnInfo::Swap(CarlifeNaviNextTurnInfo* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(nextturn_, other->nextturn_);
    std::swap(roadname_, other->roadname_);
    std::swap(totaldistance_, other->totaldistance_);
    std::swap(remaindistance_, other->remaindistance_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarlifeNaviNextTurnInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarlifeNaviNextTurnInfo_descriptor_;
  metadata.reflection = CarlifeNaviNextTurnInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace carlife
}  // namespace baidu
}  // namespace com

// @@protoc_insertion_point(global_scope)
