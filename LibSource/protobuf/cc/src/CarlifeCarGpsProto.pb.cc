// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarlifeCarGpsProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CarlifeCarGpsProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace baidu {
namespace carlife {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* CarlifeCarGps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarlifeCarGps_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CarlifeCarGpsProto_2eproto() {
  protobuf_AddDesc_CarlifeCarGpsProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CarlifeCarGpsProto.proto");
  GOOGLE_CHECK(file != NULL);
  CarlifeCarGps_descriptor_ = file->message_type(0);
  static const int CarlifeCarGps_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, antennastate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, signalquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, hrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, fix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, hdop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, pdop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, vdop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, satsused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, satsvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, horposerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, vertposerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, northspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, eastspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, vertspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, timestamp_),
  };
  CarlifeCarGps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarlifeCarGps_descriptor_,
      CarlifeCarGps::default_instance_,
      CarlifeCarGps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeCarGps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarlifeCarGps));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CarlifeCarGpsProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarlifeCarGps_descriptor_, &CarlifeCarGps::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CarlifeCarGpsProto_2eproto() {
  delete CarlifeCarGps::default_instance_;
  delete CarlifeCarGps_reflection_;
}

void protobuf_AddDesc_CarlifeCarGpsProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030CarlifeCarGpsProto.proto\022\032com.baidu.ca"
    "rlife.protobuf\"\270\003\n\rCarlifeCarGps\022\024\n\014ante"
    "nnaState\030\001 \002(\r\022\025\n\rsignalQuality\030\002 \002(\r\022\020\n"
    "\010latitude\030\003 \002(\005\022\021\n\tlongitude\030\004 \002(\005\022\016\n\006he"
    "ight\030\005 \002(\005\022\r\n\005speed\030\006 \002(\r\022\017\n\007heading\030\007 \002"
    "(\r\022\014\n\004year\030\010 \002(\r\022\r\n\005month\030\t \002(\r\022\013\n\003day\030\n"
    " \002(\r\022\013\n\003hrs\030\013 \002(\r\022\013\n\003min\030\014 \002(\r\022\013\n\003sec\030\r "
    "\002(\r\022\013\n\003fix\030\016 \002(\r\022\014\n\004hdop\030\017 \002(\r\022\014\n\004pdop\030\020"
    " \002(\r\022\014\n\004vdop\030\021 \002(\r\022\020\n\010satsUsed\030\022 \002(\r\022\023\n\013"
    "satsVisible\030\023 \002(\r\022\023\n\013horPosError\030\024 \002(\r\022\024"
    "\n\014vertPosError\030\025 \002(\r\022\022\n\nnorthSpeed\030\026 \002(\005"
    "\022\021\n\teastSpeed\030\027 \002(\005\022\021\n\tvertSpeed\030\030 \002(\005\022\021"
    "\n\ttimeStamp\030\031 \001(\004", 497);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CarlifeCarGpsProto.proto", &protobuf_RegisterTypes);
  CarlifeCarGps::default_instance_ = new CarlifeCarGps();
  CarlifeCarGps::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CarlifeCarGpsProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CarlifeCarGpsProto_2eproto {
  StaticDescriptorInitializer_CarlifeCarGpsProto_2eproto() {
    protobuf_AddDesc_CarlifeCarGpsProto_2eproto();
  }
} static_descriptor_initializer_CarlifeCarGpsProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CarlifeCarGps::kAntennaStateFieldNumber;
const int CarlifeCarGps::kSignalQualityFieldNumber;
const int CarlifeCarGps::kLatitudeFieldNumber;
const int CarlifeCarGps::kLongitudeFieldNumber;
const int CarlifeCarGps::kHeightFieldNumber;
const int CarlifeCarGps::kSpeedFieldNumber;
const int CarlifeCarGps::kHeadingFieldNumber;
const int CarlifeCarGps::kYearFieldNumber;
const int CarlifeCarGps::kMonthFieldNumber;
const int CarlifeCarGps::kDayFieldNumber;
const int CarlifeCarGps::kHrsFieldNumber;
const int CarlifeCarGps::kMinFieldNumber;
const int CarlifeCarGps::kSecFieldNumber;
const int CarlifeCarGps::kFixFieldNumber;
const int CarlifeCarGps::kHdopFieldNumber;
const int CarlifeCarGps::kPdopFieldNumber;
const int CarlifeCarGps::kVdopFieldNumber;
const int CarlifeCarGps::kSatsUsedFieldNumber;
const int CarlifeCarGps::kSatsVisibleFieldNumber;
const int CarlifeCarGps::kHorPosErrorFieldNumber;
const int CarlifeCarGps::kVertPosErrorFieldNumber;
const int CarlifeCarGps::kNorthSpeedFieldNumber;
const int CarlifeCarGps::kEastSpeedFieldNumber;
const int CarlifeCarGps::kVertSpeedFieldNumber;
const int CarlifeCarGps::kTimeStampFieldNumber;
#endif  // !_MSC_VER

CarlifeCarGps::CarlifeCarGps()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CarlifeCarGps::InitAsDefaultInstance() {
}

CarlifeCarGps::CarlifeCarGps(const CarlifeCarGps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CarlifeCarGps::SharedCtor() {
  _cached_size_ = 0;
  antennastate_ = 0u;
  signalquality_ = 0u;
  latitude_ = 0;
  longitude_ = 0;
  height_ = 0;
  speed_ = 0u;
  heading_ = 0u;
  year_ = 0u;
  month_ = 0u;
  day_ = 0u;
  hrs_ = 0u;
  min_ = 0u;
  sec_ = 0u;
  fix_ = 0u;
  hdop_ = 0u;
  pdop_ = 0u;
  vdop_ = 0u;
  satsused_ = 0u;
  satsvisible_ = 0u;
  horposerror_ = 0u;
  vertposerror_ = 0u;
  northspeed_ = 0;
  eastspeed_ = 0;
  vertspeed_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarlifeCarGps::~CarlifeCarGps() {
  SharedDtor();
}

void CarlifeCarGps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CarlifeCarGps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarlifeCarGps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarlifeCarGps_descriptor_;
}

const CarlifeCarGps& CarlifeCarGps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarlifeCarGpsProto_2eproto();
  return *default_instance_;
}

CarlifeCarGps* CarlifeCarGps::default_instance_ = NULL;

CarlifeCarGps* CarlifeCarGps::New() const {
  return new CarlifeCarGps;
}

void CarlifeCarGps::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    antennastate_ = 0u;
    signalquality_ = 0u;
    latitude_ = 0;
    longitude_ = 0;
    height_ = 0;
    speed_ = 0u;
    heading_ = 0u;
    year_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    month_ = 0u;
    day_ = 0u;
    hrs_ = 0u;
    min_ = 0u;
    sec_ = 0u;
    fix_ = 0u;
    hdop_ = 0u;
    pdop_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    vdop_ = 0u;
    satsused_ = 0u;
    satsvisible_ = 0u;
    horposerror_ = 0u;
    vertposerror_ = 0u;
    northspeed_ = 0;
    eastspeed_ = 0;
    vertspeed_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarlifeCarGps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 antennaState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &antennastate_)));
          set_has_antennastate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_signalQuality;
        break;
      }

      // required uint32 signalQuality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signalquality_)));
          set_has_signalquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_latitude;
        break;
      }

      // required int32 latitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_longitude;
        break;
      }

      // required int32 longitude = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // required int32 height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_speed;
        break;
      }

      // required uint32 speed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_heading;
        break;
      }

      // required uint32 heading = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_year;
        break;
      }

      // required uint32 year = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_month;
        break;
      }

      // required uint32 month = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_day;
        break;
      }

      // required uint32 day = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hrs;
        break;
      }

      // required uint32 hrs = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hrs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hrs_)));
          set_has_hrs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_min;
        break;
      }

      // required uint32 min = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sec;
        break;
      }

      // required uint32 sec = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_fix;
        break;
      }

      // required uint32 fix = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fix_)));
          set_has_fix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_hdop;
        break;
      }

      // required uint32 hdop = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hdop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hdop_)));
          set_has_hdop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_pdop;
        break;
      }

      // required uint32 pdop = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pdop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pdop_)));
          set_has_pdop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_vdop;
        break;
      }

      // required uint32 vdop = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vdop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vdop_)));
          set_has_vdop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_satsUsed;
        break;
      }

      // required uint32 satsUsed = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_satsUsed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satsused_)));
          set_has_satsused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_satsVisible;
        break;
      }

      // required uint32 satsVisible = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_satsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satsvisible_)));
          set_has_satsvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_horPosError;
        break;
      }

      // required uint32 horPosError = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horPosError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horposerror_)));
          set_has_horposerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_vertPosError;
        break;
      }

      // required uint32 vertPosError = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertPosError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vertposerror_)));
          set_has_vertposerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_northSpeed;
        break;
      }

      // required int32 northSpeed = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_northSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &northspeed_)));
          set_has_northspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_eastSpeed;
        break;
      }

      // required int32 eastSpeed = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eastSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eastspeed_)));
          set_has_eastspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_vertSpeed;
        break;
      }

      // required int32 vertSpeed = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertspeed_)));
          set_has_vertspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_timeStamp;
        break;
      }

      // optional uint64 timeStamp = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CarlifeCarGps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 antennaState = 1;
  if (has_antennastate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->antennastate(), output);
  }

  // required uint32 signalQuality = 2;
  if (has_signalquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->signalquality(), output);
  }

  // required int32 latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->latitude(), output);
  }

  // required int32 longitude = 4;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->longitude(), output);
  }

  // required int32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // required uint32 speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->speed(), output);
  }

  // required uint32 heading = 7;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->heading(), output);
  }

  // required uint32 year = 8;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->year(), output);
  }

  // required uint32 month = 9;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->month(), output);
  }

  // required uint32 day = 10;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->day(), output);
  }

  // required uint32 hrs = 11;
  if (has_hrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->hrs(), output);
  }

  // required uint32 min = 12;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->min(), output);
  }

  // required uint32 sec = 13;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->sec(), output);
  }

  // required uint32 fix = 14;
  if (has_fix()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->fix(), output);
  }

  // required uint32 hdop = 15;
  if (has_hdop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->hdop(), output);
  }

  // required uint32 pdop = 16;
  if (has_pdop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->pdop(), output);
  }

  // required uint32 vdop = 17;
  if (has_vdop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->vdop(), output);
  }

  // required uint32 satsUsed = 18;
  if (has_satsused()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->satsused(), output);
  }

  // required uint32 satsVisible = 19;
  if (has_satsvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->satsvisible(), output);
  }

  // required uint32 horPosError = 20;
  if (has_horposerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->horposerror(), output);
  }

  // required uint32 vertPosError = 21;
  if (has_vertposerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->vertposerror(), output);
  }

  // required int32 northSpeed = 22;
  if (has_northspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->northspeed(), output);
  }

  // required int32 eastSpeed = 23;
  if (has_eastspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->eastspeed(), output);
  }

  // required int32 vertSpeed = 24;
  if (has_vertspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->vertspeed(), output);
  }

  // optional uint64 timeStamp = 25;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CarlifeCarGps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 antennaState = 1;
  if (has_antennastate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->antennastate(), target);
  }

  // required uint32 signalQuality = 2;
  if (has_signalquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->signalquality(), target);
  }

  // required int32 latitude = 3;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->latitude(), target);
  }

  // required int32 longitude = 4;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->longitude(), target);
  }

  // required int32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // required uint32 speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->speed(), target);
  }

  // required uint32 heading = 7;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->heading(), target);
  }

  // required uint32 year = 8;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->year(), target);
  }

  // required uint32 month = 9;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->month(), target);
  }

  // required uint32 day = 10;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->day(), target);
  }

  // required uint32 hrs = 11;
  if (has_hrs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->hrs(), target);
  }

  // required uint32 min = 12;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->min(), target);
  }

  // required uint32 sec = 13;
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->sec(), target);
  }

  // required uint32 fix = 14;
  if (has_fix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->fix(), target);
  }

  // required uint32 hdop = 15;
  if (has_hdop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->hdop(), target);
  }

  // required uint32 pdop = 16;
  if (has_pdop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->pdop(), target);
  }

  // required uint32 vdop = 17;
  if (has_vdop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->vdop(), target);
  }

  // required uint32 satsUsed = 18;
  if (has_satsused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->satsused(), target);
  }

  // required uint32 satsVisible = 19;
  if (has_satsvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->satsvisible(), target);
  }

  // required uint32 horPosError = 20;
  if (has_horposerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->horposerror(), target);
  }

  // required uint32 vertPosError = 21;
  if (has_vertposerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->vertposerror(), target);
  }

  // required int32 northSpeed = 22;
  if (has_northspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->northspeed(), target);
  }

  // required int32 eastSpeed = 23;
  if (has_eastspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->eastspeed(), target);
  }

  // required int32 vertSpeed = 24;
  if (has_vertspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->vertspeed(), target);
  }

  // optional uint64 timeStamp = 25;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CarlifeCarGps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 antennaState = 1;
    if (has_antennastate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->antennastate());
    }

    // required uint32 signalQuality = 2;
    if (has_signalquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signalquality());
    }

    // required int32 latitude = 3;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latitude());
    }

    // required int32 longitude = 4;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longitude());
    }

    // required int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // required uint32 speed = 6;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // required uint32 heading = 7;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heading());
    }

    // required uint32 year = 8;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 month = 9;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // required uint32 day = 10;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // required uint32 hrs = 11;
    if (has_hrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hrs());
    }

    // required uint32 min = 12;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min());
    }

    // required uint32 sec = 13;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sec());
    }

    // required uint32 fix = 14;
    if (has_fix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fix());
    }

    // required uint32 hdop = 15;
    if (has_hdop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hdop());
    }

    // required uint32 pdop = 16;
    if (has_pdop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pdop());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 vdop = 17;
    if (has_vdop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vdop());
    }

    // required uint32 satsUsed = 18;
    if (has_satsused()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->satsused());
    }

    // required uint32 satsVisible = 19;
    if (has_satsvisible()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->satsvisible());
    }

    // required uint32 horPosError = 20;
    if (has_horposerror()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->horposerror());
    }

    // required uint32 vertPosError = 21;
    if (has_vertposerror()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vertposerror());
    }

    // required int32 northSpeed = 22;
    if (has_northspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->northspeed());
    }

    // required int32 eastSpeed = 23;
    if (has_eastspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eastspeed());
    }

    // required int32 vertSpeed = 24;
    if (has_vertspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertspeed());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint64 timeStamp = 25;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarlifeCarGps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarlifeCarGps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarlifeCarGps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarlifeCarGps::MergeFrom(const CarlifeCarGps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_antennastate()) {
      set_antennastate(from.antennastate());
    }
    if (from.has_signalquality()) {
      set_signalquality(from.signalquality());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hrs()) {
      set_hrs(from.hrs());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_sec()) {
      set_sec(from.sec());
    }
    if (from.has_fix()) {
      set_fix(from.fix());
    }
    if (from.has_hdop()) {
      set_hdop(from.hdop());
    }
    if (from.has_pdop()) {
      set_pdop(from.pdop());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vdop()) {
      set_vdop(from.vdop());
    }
    if (from.has_satsused()) {
      set_satsused(from.satsused());
    }
    if (from.has_satsvisible()) {
      set_satsvisible(from.satsvisible());
    }
    if (from.has_horposerror()) {
      set_horposerror(from.horposerror());
    }
    if (from.has_vertposerror()) {
      set_vertposerror(from.vertposerror());
    }
    if (from.has_northspeed()) {
      set_northspeed(from.northspeed());
    }
    if (from.has_eastspeed()) {
      set_eastspeed(from.eastspeed());
    }
    if (from.has_vertspeed()) {
      set_vertspeed(from.vertspeed());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarlifeCarGps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarlifeCarGps::CopyFrom(const CarlifeCarGps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarlifeCarGps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00ffffff) != 0x00ffffff) return false;

  return true;
}

void CarlifeCarGps::Swap(CarlifeCarGps* other) {
  if (other != this) {
    std::swap(antennastate_, other->antennastate_);
    std::swap(signalquality_, other->signalquality_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(height_, other->height_);
    std::swap(speed_, other->speed_);
    std::swap(heading_, other->heading_);
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(hrs_, other->hrs_);
    std::swap(min_, other->min_);
    std::swap(sec_, other->sec_);
    std::swap(fix_, other->fix_);
    std::swap(hdop_, other->hdop_);
    std::swap(pdop_, other->pdop_);
    std::swap(vdop_, other->vdop_);
    std::swap(satsused_, other->satsused_);
    std::swap(satsvisible_, other->satsvisible_);
    std::swap(horposerror_, other->horposerror_);
    std::swap(vertposerror_, other->vertposerror_);
    std::swap(northspeed_, other->northspeed_);
    std::swap(eastspeed_, other->eastspeed_);
    std::swap(vertspeed_, other->vertspeed_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarlifeCarGps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarlifeCarGps_descriptor_;
  metadata.reflection = CarlifeCarGps_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace carlife
}  // namespace baidu
}  // namespace com

// @@protoc_insertion_point(global_scope)
