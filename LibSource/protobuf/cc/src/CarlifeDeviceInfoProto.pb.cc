// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarlifeDeviceInfoProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CarlifeDeviceInfoProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace baidu {
namespace carlife {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* CarlifeDeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarlifeDeviceInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CarlifeDeviceInfoProto_2eproto() {
  protobuf_AddDesc_CarlifeDeviceInfoProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CarlifeDeviceInfoProto.proto");
  GOOGLE_CHECK(file != NULL);
  CarlifeDeviceInfo_descriptor_ = file->message_type(0);
  static const int CarlifeDeviceInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, board_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, bootloader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, cpu_abi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, cpu_abi2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, fingerprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, hardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, manufacturer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, codename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, incremental_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, release_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, sdk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, sdk_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, btaddress_),
  };
  CarlifeDeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarlifeDeviceInfo_descriptor_,
      CarlifeDeviceInfo::default_instance_,
      CarlifeDeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeDeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarlifeDeviceInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CarlifeDeviceInfoProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarlifeDeviceInfo_descriptor_, &CarlifeDeviceInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CarlifeDeviceInfoProto_2eproto() {
  delete CarlifeDeviceInfo::default_instance_;
  delete CarlifeDeviceInfo_reflection_;
}

void protobuf_AddDesc_CarlifeDeviceInfoProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034CarlifeDeviceInfoProto.proto\022\032com.baid"
    "u.carlife.protobuf\"\225\003\n\021CarlifeDeviceInfo"
    "\022\n\n\002os\030\001 \001(\t\022\r\n\005board\030\002 \001(\t\022\022\n\nbootloade"
    "r\030\003 \001(\t\022\r\n\005brand\030\004 \001(\t\022\017\n\007cpu_abi\030\005 \001(\t\022"
    "\020\n\010cpu_abi2\030\006 \001(\t\022\016\n\006device\030\007 \001(\t\022\017\n\007dis"
    "play\030\010 \001(\t\022\023\n\013fingerprint\030\t \001(\t\022\020\n\010hardw"
    "are\030\n \001(\t\022\014\n\004host\030\013 \001(\t\022\013\n\003cid\030\014 \001(\t\022\024\n\014"
    "manufacturer\030\r \001(\t\022\r\n\005model\030\016 \001(\t\022\017\n\007pro"
    "duct\030\017 \001(\t\022\016\n\006serial\030\020 \001(\t\022\020\n\010codename\030\021"
    " \001(\t\022\023\n\013incremental\030\022 \001(\t\022\017\n\007release\030\023 \001"
    "(\t\022\013\n\003sdk\030\024 \001(\t\022\017\n\007sdk_int\030\025 \001(\005\022\r\n\005toke"
    "n\030\026 \001(\t\022\021\n\tbtaddress\030\027 \001(\t", 466);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CarlifeDeviceInfoProto.proto", &protobuf_RegisterTypes);
  CarlifeDeviceInfo::default_instance_ = new CarlifeDeviceInfo();
  CarlifeDeviceInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CarlifeDeviceInfoProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CarlifeDeviceInfoProto_2eproto {
  StaticDescriptorInitializer_CarlifeDeviceInfoProto_2eproto() {
    protobuf_AddDesc_CarlifeDeviceInfoProto_2eproto();
  }
} static_descriptor_initializer_CarlifeDeviceInfoProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CarlifeDeviceInfo::kOsFieldNumber;
const int CarlifeDeviceInfo::kBoardFieldNumber;
const int CarlifeDeviceInfo::kBootloaderFieldNumber;
const int CarlifeDeviceInfo::kBrandFieldNumber;
const int CarlifeDeviceInfo::kCpuAbiFieldNumber;
const int CarlifeDeviceInfo::kCpuAbi2FieldNumber;
const int CarlifeDeviceInfo::kDeviceFieldNumber;
const int CarlifeDeviceInfo::kDisplayFieldNumber;
const int CarlifeDeviceInfo::kFingerprintFieldNumber;
const int CarlifeDeviceInfo::kHardwareFieldNumber;
const int CarlifeDeviceInfo::kHostFieldNumber;
const int CarlifeDeviceInfo::kCidFieldNumber;
const int CarlifeDeviceInfo::kManufacturerFieldNumber;
const int CarlifeDeviceInfo::kModelFieldNumber;
const int CarlifeDeviceInfo::kProductFieldNumber;
const int CarlifeDeviceInfo::kSerialFieldNumber;
const int CarlifeDeviceInfo::kCodenameFieldNumber;
const int CarlifeDeviceInfo::kIncrementalFieldNumber;
const int CarlifeDeviceInfo::kReleaseFieldNumber;
const int CarlifeDeviceInfo::kSdkFieldNumber;
const int CarlifeDeviceInfo::kSdkIntFieldNumber;
const int CarlifeDeviceInfo::kTokenFieldNumber;
const int CarlifeDeviceInfo::kBtaddressFieldNumber;
#endif  // !_MSC_VER

CarlifeDeviceInfo::CarlifeDeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CarlifeDeviceInfo::InitAsDefaultInstance() {
}

CarlifeDeviceInfo::CarlifeDeviceInfo(const CarlifeDeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CarlifeDeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  board_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bootloader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cpu_abi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cpu_abi2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  display_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  product_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  codename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  incremental_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  release_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sdk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sdk_int_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  btaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarlifeDeviceInfo::~CarlifeDeviceInfo() {
  SharedDtor();
}

void CarlifeDeviceInfo::SharedDtor() {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (board_ != &::google::protobuf::internal::kEmptyString) {
    delete board_;
  }
  if (bootloader_ != &::google::protobuf::internal::kEmptyString) {
    delete bootloader_;
  }
  if (brand_ != &::google::protobuf::internal::kEmptyString) {
    delete brand_;
  }
  if (cpu_abi_ != &::google::protobuf::internal::kEmptyString) {
    delete cpu_abi_;
  }
  if (cpu_abi2_ != &::google::protobuf::internal::kEmptyString) {
    delete cpu_abi2_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (display_ != &::google::protobuf::internal::kEmptyString) {
    delete display_;
  }
  if (fingerprint_ != &::google::protobuf::internal::kEmptyString) {
    delete fingerprint_;
  }
  if (hardware_ != &::google::protobuf::internal::kEmptyString) {
    delete hardware_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    delete manufacturer_;
  }
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (product_ != &::google::protobuf::internal::kEmptyString) {
    delete product_;
  }
  if (serial_ != &::google::protobuf::internal::kEmptyString) {
    delete serial_;
  }
  if (codename_ != &::google::protobuf::internal::kEmptyString) {
    delete codename_;
  }
  if (incremental_ != &::google::protobuf::internal::kEmptyString) {
    delete incremental_;
  }
  if (release_ != &::google::protobuf::internal::kEmptyString) {
    delete release_;
  }
  if (sdk_ != &::google::protobuf::internal::kEmptyString) {
    delete sdk_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (btaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete btaddress_;
  }
  if (this != default_instance_) {
  }
}

void CarlifeDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarlifeDeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarlifeDeviceInfo_descriptor_;
}

const CarlifeDeviceInfo& CarlifeDeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarlifeDeviceInfoProto_2eproto();
  return *default_instance_;
}

CarlifeDeviceInfo* CarlifeDeviceInfo::default_instance_ = NULL;

CarlifeDeviceInfo* CarlifeDeviceInfo::New() const {
  return new CarlifeDeviceInfo;
}

void CarlifeDeviceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
    if (has_board()) {
      if (board_ != &::google::protobuf::internal::kEmptyString) {
        board_->clear();
      }
    }
    if (has_bootloader()) {
      if (bootloader_ != &::google::protobuf::internal::kEmptyString) {
        bootloader_->clear();
      }
    }
    if (has_brand()) {
      if (brand_ != &::google::protobuf::internal::kEmptyString) {
        brand_->clear();
      }
    }
    if (has_cpu_abi()) {
      if (cpu_abi_ != &::google::protobuf::internal::kEmptyString) {
        cpu_abi_->clear();
      }
    }
    if (has_cpu_abi2()) {
      if (cpu_abi2_ != &::google::protobuf::internal::kEmptyString) {
        cpu_abi2_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
    if (has_display()) {
      if (display_ != &::google::protobuf::internal::kEmptyString) {
        display_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_fingerprint()) {
      if (fingerprint_ != &::google::protobuf::internal::kEmptyString) {
        fingerprint_->clear();
      }
    }
    if (has_hardware()) {
      if (hardware_ != &::google::protobuf::internal::kEmptyString) {
        hardware_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    if (has_manufacturer()) {
      if (manufacturer_ != &::google::protobuf::internal::kEmptyString) {
        manufacturer_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::kEmptyString) {
        model_->clear();
      }
    }
    if (has_product()) {
      if (product_ != &::google::protobuf::internal::kEmptyString) {
        product_->clear();
      }
    }
    if (has_serial()) {
      if (serial_ != &::google::protobuf::internal::kEmptyString) {
        serial_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_codename()) {
      if (codename_ != &::google::protobuf::internal::kEmptyString) {
        codename_->clear();
      }
    }
    if (has_incremental()) {
      if (incremental_ != &::google::protobuf::internal::kEmptyString) {
        incremental_->clear();
      }
    }
    if (has_release()) {
      if (release_ != &::google::protobuf::internal::kEmptyString) {
        release_->clear();
      }
    }
    if (has_sdk()) {
      if (sdk_ != &::google::protobuf::internal::kEmptyString) {
        sdk_->clear();
      }
    }
    sdk_int_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_btaddress()) {
      if (btaddress_ != &::google::protobuf::internal::kEmptyString) {
        btaddress_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarlifeDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string os = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_board;
        break;
      }

      // optional string board = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_board:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_board()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->board().data(), this->board().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bootloader;
        break;
      }

      // optional string bootloader = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bootloader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bootloader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bootloader().data(), this->bootloader().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_brand;
        break;
      }

      // optional string brand = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cpu_abi;
        break;
      }

      // optional string cpu_abi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cpu_abi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_abi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cpu_abi().data(), this->cpu_abi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cpu_abi2;
        break;
      }

      // optional string cpu_abi2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cpu_abi2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_abi2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cpu_abi2().data(), this->cpu_abi2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_device;
        break;
      }

      // optional string device = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_display;
        break;
      }

      // optional string display = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->display().data(), this->display().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_fingerprint;
        break;
      }

      // optional string fingerprint = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fingerprint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fingerprint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fingerprint().data(), this->fingerprint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hardware;
        break;
      }

      // optional string hardware = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hardware().data(), this->hardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_host;
        break;
      }

      // optional string host = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_cid;
        break;
      }

      // optional string cid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_manufacturer;
        break;
      }

      // optional string manufacturer = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manufacturer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manufacturer().data(), this->manufacturer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_model;
        break;
      }

      // optional string model = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_product;
        break;
      }

      // optional string product = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->product().data(), this->product().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_serial;
        break;
      }

      // optional string serial = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serial().data(), this->serial().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_codename;
        break;
      }

      // optional string codename = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_codename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->codename().data(), this->codename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_incremental;
        break;
      }

      // optional string incremental = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_incremental:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_incremental()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->incremental().data(), this->incremental().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_release;
        break;
      }

      // optional string release = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_release:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_release()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->release().data(), this->release().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_sdk;
        break;
      }

      // optional string sdk = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sdk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdk().data(), this->sdk().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_sdk_int;
        break;
      }

      // optional int32 sdk_int = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sdk_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sdk_int_)));
          set_has_sdk_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_token;
        break;
      }

      // optional string token = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_btaddress;
        break;
      }

      // optional string btaddress = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_btaddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_btaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->btaddress().data(), this->btaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CarlifeDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string os = 1;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->os(), output);
  }

  // optional string board = 2;
  if (has_board()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->board().data(), this->board().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->board(), output);
  }

  // optional string bootloader = 3;
  if (has_bootloader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bootloader().data(), this->bootloader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bootloader(), output);
  }

  // optional string brand = 4;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->brand(), output);
  }

  // optional string cpu_abi = 5;
  if (has_cpu_abi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpu_abi().data(), this->cpu_abi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cpu_abi(), output);
  }

  // optional string cpu_abi2 = 6;
  if (has_cpu_abi2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpu_abi2().data(), this->cpu_abi2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->cpu_abi2(), output);
  }

  // optional string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->device(), output);
  }

  // optional string display = 8;
  if (has_display()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display().data(), this->display().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->display(), output);
  }

  // optional string fingerprint = 9;
  if (has_fingerprint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fingerprint().data(), this->fingerprint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->fingerprint(), output);
  }

  // optional string hardware = 10;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->hardware(), output);
  }

  // optional string host = 11;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->host(), output);
  }

  // optional string cid = 12;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->cid(), output);
  }

  // optional string manufacturer = 13;
  if (has_manufacturer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manufacturer().data(), this->manufacturer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->manufacturer(), output);
  }

  // optional string model = 14;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->model(), output);
  }

  // optional string product = 15;
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->product(), output);
  }

  // optional string serial = 16;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serial().data(), this->serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->serial(), output);
  }

  // optional string codename = 17;
  if (has_codename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codename().data(), this->codename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->codename(), output);
  }

  // optional string incremental = 18;
  if (has_incremental()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->incremental().data(), this->incremental().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->incremental(), output);
  }

  // optional string release = 19;
  if (has_release()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->release().data(), this->release().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->release(), output);
  }

  // optional string sdk = 20;
  if (has_sdk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk().data(), this->sdk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->sdk(), output);
  }

  // optional int32 sdk_int = 21;
  if (has_sdk_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->sdk_int(), output);
  }

  // optional string token = 22;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->token(), output);
  }

  // optional string btaddress = 23;
  if (has_btaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->btaddress().data(), this->btaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->btaddress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CarlifeDeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string os = 1;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->os(), target);
  }

  // optional string board = 2;
  if (has_board()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->board().data(), this->board().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->board(), target);
  }

  // optional string bootloader = 3;
  if (has_bootloader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bootloader().data(), this->bootloader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bootloader(), target);
  }

  // optional string brand = 4;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->brand(), target);
  }

  // optional string cpu_abi = 5;
  if (has_cpu_abi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpu_abi().data(), this->cpu_abi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cpu_abi(), target);
  }

  // optional string cpu_abi2 = 6;
  if (has_cpu_abi2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpu_abi2().data(), this->cpu_abi2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cpu_abi2(), target);
  }

  // optional string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->device(), target);
  }

  // optional string display = 8;
  if (has_display()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display().data(), this->display().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->display(), target);
  }

  // optional string fingerprint = 9;
  if (has_fingerprint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fingerprint().data(), this->fingerprint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->fingerprint(), target);
  }

  // optional string hardware = 10;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->hardware(), target);
  }

  // optional string host = 11;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->host(), target);
  }

  // optional string cid = 12;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->cid(), target);
  }

  // optional string manufacturer = 13;
  if (has_manufacturer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manufacturer().data(), this->manufacturer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->manufacturer(), target);
  }

  // optional string model = 14;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->model(), target);
  }

  // optional string product = 15;
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->product(), target);
  }

  // optional string serial = 16;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serial().data(), this->serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->serial(), target);
  }

  // optional string codename = 17;
  if (has_codename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codename().data(), this->codename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->codename(), target);
  }

  // optional string incremental = 18;
  if (has_incremental()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->incremental().data(), this->incremental().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->incremental(), target);
  }

  // optional string release = 19;
  if (has_release()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->release().data(), this->release().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->release(), target);
  }

  // optional string sdk = 20;
  if (has_sdk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk().data(), this->sdk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->sdk(), target);
  }

  // optional int32 sdk_int = 21;
  if (has_sdk_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->sdk_int(), target);
  }

  // optional string token = 22;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->token(), target);
  }

  // optional string btaddress = 23;
  if (has_btaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->btaddress().data(), this->btaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->btaddress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CarlifeDeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string os = 1;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string board = 2;
    if (has_board()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->board());
    }

    // optional string bootloader = 3;
    if (has_bootloader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bootloader());
    }

    // optional string brand = 4;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

    // optional string cpu_abi = 5;
    if (has_cpu_abi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpu_abi());
    }

    // optional string cpu_abi2 = 6;
    if (has_cpu_abi2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpu_abi2());
    }

    // optional string device = 7;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional string display = 8;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string fingerprint = 9;
    if (has_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fingerprint());
    }

    // optional string hardware = 10;
    if (has_hardware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware());
    }

    // optional string host = 11;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional string cid = 12;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string manufacturer = 13;
    if (has_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer());
    }

    // optional string model = 14;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string product = 15;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }

    // optional string serial = 16;
    if (has_serial()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string codename = 17;
    if (has_codename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codename());
    }

    // optional string incremental = 18;
    if (has_incremental()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->incremental());
    }

    // optional string release = 19;
    if (has_release()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->release());
    }

    // optional string sdk = 20;
    if (has_sdk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdk());
    }

    // optional int32 sdk_int = 21;
    if (has_sdk_int()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sdk_int());
    }

    // optional string token = 22;
    if (has_token()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string btaddress = 23;
    if (has_btaddress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->btaddress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarlifeDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarlifeDeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarlifeDeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarlifeDeviceInfo::MergeFrom(const CarlifeDeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_board()) {
      set_board(from.board());
    }
    if (from.has_bootloader()) {
      set_bootloader(from.bootloader());
    }
    if (from.has_brand()) {
      set_brand(from.brand());
    }
    if (from.has_cpu_abi()) {
      set_cpu_abi(from.cpu_abi());
    }
    if (from.has_cpu_abi2()) {
      set_cpu_abi2(from.cpu_abi2());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fingerprint()) {
      set_fingerprint(from.fingerprint());
    }
    if (from.has_hardware()) {
      set_hardware(from.hardware());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_manufacturer()) {
      set_manufacturer(from.manufacturer());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_product()) {
      set_product(from.product());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_codename()) {
      set_codename(from.codename());
    }
    if (from.has_incremental()) {
      set_incremental(from.incremental());
    }
    if (from.has_release()) {
      set_release(from.release());
    }
    if (from.has_sdk()) {
      set_sdk(from.sdk());
    }
    if (from.has_sdk_int()) {
      set_sdk_int(from.sdk_int());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_btaddress()) {
      set_btaddress(from.btaddress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarlifeDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarlifeDeviceInfo::CopyFrom(const CarlifeDeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarlifeDeviceInfo::IsInitialized() const {

  return true;
}

void CarlifeDeviceInfo::Swap(CarlifeDeviceInfo* other) {
  if (other != this) {
    std::swap(os_, other->os_);
    std::swap(board_, other->board_);
    std::swap(bootloader_, other->bootloader_);
    std::swap(brand_, other->brand_);
    std::swap(cpu_abi_, other->cpu_abi_);
    std::swap(cpu_abi2_, other->cpu_abi2_);
    std::swap(device_, other->device_);
    std::swap(display_, other->display_);
    std::swap(fingerprint_, other->fingerprint_);
    std::swap(hardware_, other->hardware_);
    std::swap(host_, other->host_);
    std::swap(cid_, other->cid_);
    std::swap(manufacturer_, other->manufacturer_);
    std::swap(model_, other->model_);
    std::swap(product_, other->product_);
    std::swap(serial_, other->serial_);
    std::swap(codename_, other->codename_);
    std::swap(incremental_, other->incremental_);
    std::swap(release_, other->release_);
    std::swap(sdk_, other->sdk_);
    std::swap(sdk_int_, other->sdk_int_);
    std::swap(token_, other->token_);
    std::swap(btaddress_, other->btaddress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarlifeDeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarlifeDeviceInfo_descriptor_;
  metadata.reflection = CarlifeDeviceInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace carlife
}  // namespace baidu
}  // namespace com

// @@protoc_insertion_point(global_scope)
