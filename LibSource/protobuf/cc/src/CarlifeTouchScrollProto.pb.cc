// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarlifeTouchScrollProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CarlifeTouchScrollProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace baidu {
namespace carlife {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* CarlifeTouchScroll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarlifeTouchScroll_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CarlifeTouchScrollProto_2eproto() {
  protobuf_AddDesc_CarlifeTouchScrollProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CarlifeTouchScrollProto.proto");
  GOOGLE_CHECK(file != NULL);
  CarlifeTouchScroll_descriptor_ = file->message_type(0);
  static const int CarlifeTouchScroll_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchScroll, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchScroll, y1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchScroll, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchScroll, y2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchScroll, distancex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchScroll, distancey_),
  };
  CarlifeTouchScroll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarlifeTouchScroll_descriptor_,
      CarlifeTouchScroll::default_instance_,
      CarlifeTouchScroll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchScroll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarlifeTouchScroll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarlifeTouchScroll));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CarlifeTouchScrollProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarlifeTouchScroll_descriptor_, &CarlifeTouchScroll::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CarlifeTouchScrollProto_2eproto() {
  delete CarlifeTouchScroll::default_instance_;
  delete CarlifeTouchScroll_reflection_;
}

void protobuf_AddDesc_CarlifeTouchScrollProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035CarlifeTouchScrollProto.proto\022\032com.bai"
    "du.carlife.protobuf\"j\n\022CarlifeTouchScrol"
    "l\022\n\n\002x1\030\001 \002(\005\022\n\n\002y1\030\002 \002(\005\022\n\n\002x2\030\003 \002(\005\022\n\n"
    "\002y2\030\004 \002(\005\022\021\n\tdistanceX\030\005 \002(\002\022\021\n\tdistance"
    "Y\030\006 \002(\002", 167);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CarlifeTouchScrollProto.proto", &protobuf_RegisterTypes);
  CarlifeTouchScroll::default_instance_ = new CarlifeTouchScroll();
  CarlifeTouchScroll::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CarlifeTouchScrollProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CarlifeTouchScrollProto_2eproto {
  StaticDescriptorInitializer_CarlifeTouchScrollProto_2eproto() {
    protobuf_AddDesc_CarlifeTouchScrollProto_2eproto();
  }
} static_descriptor_initializer_CarlifeTouchScrollProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CarlifeTouchScroll::kX1FieldNumber;
const int CarlifeTouchScroll::kY1FieldNumber;
const int CarlifeTouchScroll::kX2FieldNumber;
const int CarlifeTouchScroll::kY2FieldNumber;
const int CarlifeTouchScroll::kDistanceXFieldNumber;
const int CarlifeTouchScroll::kDistanceYFieldNumber;
#endif  // !_MSC_VER

CarlifeTouchScroll::CarlifeTouchScroll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CarlifeTouchScroll::InitAsDefaultInstance() {
}

CarlifeTouchScroll::CarlifeTouchScroll(const CarlifeTouchScroll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CarlifeTouchScroll::SharedCtor() {
  _cached_size_ = 0;
  x1_ = 0;
  y1_ = 0;
  x2_ = 0;
  y2_ = 0;
  distancex_ = 0;
  distancey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarlifeTouchScroll::~CarlifeTouchScroll() {
  SharedDtor();
}

void CarlifeTouchScroll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CarlifeTouchScroll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarlifeTouchScroll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarlifeTouchScroll_descriptor_;
}

const CarlifeTouchScroll& CarlifeTouchScroll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarlifeTouchScrollProto_2eproto();
  return *default_instance_;
}

CarlifeTouchScroll* CarlifeTouchScroll::default_instance_ = NULL;

CarlifeTouchScroll* CarlifeTouchScroll::New() const {
  return new CarlifeTouchScroll;
}

void CarlifeTouchScroll::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x1_ = 0;
    y1_ = 0;
    x2_ = 0;
    y2_ = 0;
    distancex_ = 0;
    distancey_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarlifeTouchScroll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x1_)));
          set_has_x1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y1;
        break;
      }

      // required int32 y1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y1_)));
          set_has_y1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x2;
        break;
      }

      // required int32 x2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x2_)));
          set_has_x2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y2;
        break;
      }

      // required int32 y2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y2_)));
          set_has_y2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_distanceX;
        break;
      }

      // required float distanceX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_distanceX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distancex_)));
          set_has_distancex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_distanceY;
        break;
      }

      // required float distanceY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_distanceY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distancey_)));
          set_has_distancey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CarlifeTouchScroll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x1 = 1;
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x1(), output);
  }

  // required int32 y1 = 2;
  if (has_y1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y1(), output);
  }

  // required int32 x2 = 3;
  if (has_x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x2(), output);
  }

  // required int32 y2 = 4;
  if (has_y2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y2(), output);
  }

  // required float distanceX = 5;
  if (has_distancex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->distancex(), output);
  }

  // required float distanceY = 6;
  if (has_distancey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->distancey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CarlifeTouchScroll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x1 = 1;
  if (has_x1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x1(), target);
  }

  // required int32 y1 = 2;
  if (has_y1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y1(), target);
  }

  // required int32 x2 = 3;
  if (has_x2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x2(), target);
  }

  // required int32 y2 = 4;
  if (has_y2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y2(), target);
  }

  // required float distanceX = 5;
  if (has_distancex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->distancex(), target);
  }

  // required float distanceY = 6;
  if (has_distancey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->distancey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CarlifeTouchScroll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x1 = 1;
    if (has_x1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x1());
    }

    // required int32 y1 = 2;
    if (has_y1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y1());
    }

    // required int32 x2 = 3;
    if (has_x2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x2());
    }

    // required int32 y2 = 4;
    if (has_y2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y2());
    }

    // required float distanceX = 5;
    if (has_distancex()) {
      total_size += 1 + 4;
    }

    // required float distanceY = 6;
    if (has_distancey()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarlifeTouchScroll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarlifeTouchScroll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarlifeTouchScroll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarlifeTouchScroll::MergeFrom(const CarlifeTouchScroll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x1()) {
      set_x1(from.x1());
    }
    if (from.has_y1()) {
      set_y1(from.y1());
    }
    if (from.has_x2()) {
      set_x2(from.x2());
    }
    if (from.has_y2()) {
      set_y2(from.y2());
    }
    if (from.has_distancex()) {
      set_distancex(from.distancex());
    }
    if (from.has_distancey()) {
      set_distancey(from.distancey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarlifeTouchScroll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarlifeTouchScroll::CopyFrom(const CarlifeTouchScroll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarlifeTouchScroll::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CarlifeTouchScroll::Swap(CarlifeTouchScroll* other) {
  if (other != this) {
    std::swap(x1_, other->x1_);
    std::swap(y1_, other->y1_);
    std::swap(x2_, other->x2_);
    std::swap(y2_, other->y2_);
    std::swap(distancex_, other->distancex_);
    std::swap(distancey_, other->distancey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarlifeTouchScroll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarlifeTouchScroll_descriptor_;
  metadata.reflection = CarlifeTouchScroll_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace carlife
}  // namespace baidu
}  // namespace com

// @@protoc_insertion_point(global_scope)
